{
  "containers": [
    {
      "name": "@container::mini_PET::@global::yr_doy",
      "source_refs": [],
      "repeat": false,
      "arguments": [
        "@variable::yrdoy::-1",
        "@variable::yr::-1",
        "@variable::doy::-1"
      ],
      "updated": [
        "@variable::yr::0",
        "@variable::doy::0"
      ],
      "return_value": [],
      "body": [
        {
          "function": {
            "name": "mini_PET__yr_doy__assign__yr__0",
            "type": "lambda"
          },
          "input": [
            "@variable::yrdoy::-1"
          ],
          "output": [
            "@variable::yr::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__yr_doy__assign__doy__0",
            "type": "lambda"
          },
          "input": [
            "@variable::yrdoy::-1",
            "@variable::yr::0"
          ],
          "output": [
            "@variable::doy::0"
          ],
          "updated": []
        }
      ]
    },
    {
      "name": "@container::mini_PET::@global::vpslop",
      "source_refs": [],
      "repeat": false,
      "arguments": [
        "@variable::t::-1"
      ],
      "updated": [],
      "return_value": [
        "@variable::vpslop_return::0"
      ],
      "body": [
        {
          "function": {
            "name": "@container::mini_PET::@global::vpsat",
            "type": "container"
          },
          "input": [
            "@variable::t::-1"
          ],
          "output": [
            "@variable::vpsat_f8087::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__vpslop__assign__vpslop_return__0",
            "type": "lambda"
          },
          "input": [
            "@variable::t::-1",
            "@variable::vpsat_f8087::0"
          ],
          "output": [
            "@variable::vpslop_return::0"
          ],
          "updated": []
        }
      ]
    },
    {
      "name": "@container::mini_PET::@global::vpsat",
      "source_refs": [],
      "repeat": false,
      "arguments": [
        "@variable::t::-1"
      ],
      "updated": [],
      "return_value": [
        "@variable::vpsat_return::0"
      ],
      "body": [
        {
          "function": {
            "name": "mini_PET__vpsat__assign__vpsat_return__0",
            "type": "lambda"
          },
          "input": [
            "@variable::t::-1"
          ],
          "output": [
            "@variable::vpsat_return::0"
          ],
          "updated": []
        }
      ]
    },
    {
      "name": "@container::mini_PET::@global::pet",
      "source_refs": [],
      "repeat": false,
      "arguments": [
        "@variable::control::-1",
        "@variable::et_alb::-1",
        "@variable::xhlai::-1",
        "@variable::meevp::-1",
        "@variable::weather::-1",
        "@variable::eoratio::-1",
        "@variable::canht::-1",
        "@variable::eo::-1"
      ],
      "updated": [],
      "return_value": [],
      "body": [
        {
          "function": {
            "name": "mini_PET__pet__assign__clouds__0",
            "type": "lambda"
          },
          "input": [
            "@variable::clouds::-1"
          ],
          "output": [
            "@variable::clouds::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pet__assign__srad__0",
            "type": "lambda"
          },
          "input": [
            "@variable::srad::-1"
          ],
          "output": [
            "@variable::srad::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pet__assign__tavg__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tavg::-1"
          ],
          "output": [
            "@variable::tavg::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pet__assign__tdew__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tdew::-1"
          ],
          "output": [
            "@variable::tdew::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pet__assign__tmax__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tmax::-1"
          ],
          "output": [
            "@variable::tmax::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pet__assign__tmin__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tmin::-1"
          ],
          "output": [
            "@variable::tmin::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pet__assign__vapr__0",
            "type": "lambda"
          },
          "input": [
            "@variable::vapr::-1"
          ],
          "output": [
            "@variable::vapr::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pet__assign__windht__0",
            "type": "lambda"
          },
          "input": [
            "@variable::windht::-1"
          ],
          "output": [
            "@variable::windht::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pet__assign__windsp__0",
            "type": "lambda"
          },
          "input": [
            "@variable::windsp::-1"
          ],
          "output": [
            "@variable::windsp::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pet__assign__windrun__0",
            "type": "lambda"
          },
          "input": [
            "@variable::windrun::-1"
          ],
          "output": [
            "@variable::windrun::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pet__assign__xlat__0",
            "type": "lambda"
          },
          "input": [
            "@variable::xlat::-1"
          ],
          "output": [
            "@variable::xlat::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pet__assign__xelev__0",
            "type": "lambda"
          },
          "input": [
            "@variable::xelev::-1"
          ],
          "output": [
            "@variable::xelev::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pet__assign__yrdoy__0",
            "type": "lambda"
          },
          "input": [
            "@variable::yrdoy::-1"
          ],
          "output": [
            "@variable::yrdoy::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "@container::mini_PET::@global::yr_doy",
            "type": "container"
          },
          "input": [
            "@variable::yrdoy::0",
            "@variable::year::-1",
            "@variable::doy::-1"
          ],
          "output": [],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pet__condition__IF_0__0",
            "type": "lambda"
          },
          "input": [
            "@variable::meevp::-1"
          ],
          "output": [
            "@variable::IF_0::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "petasce",
            "type": "container"
          },
          "input": [
            "@variable::canht::-1",
            "@variable::doy::-1",
            "@variable::et_alb::-1",
            "@variable::meevp::-1",
            "@variable::srad::0",
            "@variable::tdew::0",
            "@variable::tmax::0",
            "@variable::tmin::0",
            "@variable::windht::0",
            "@variable::windrun::0",
            "@variable::xhlai::-1",
            "@variable::xlat::0",
            "@variable::xelev::0",
            "@variable::eo::-1"
          ],
          "output": [],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pet__condition__IF_0__1",
            "type": "lambda"
          },
          "input": [
            "@variable::meevp::-1"
          ],
          "output": [
            "@variable::IF_0::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "petpen",
            "type": "container"
          },
          "input": [
            "@variable::clouds::0",
            "@variable::eoratio::-1",
            "@variable::et_alb::-1",
            "@variable::srad::0",
            "@variable::tavg::0",
            "@variable::tdew::0",
            "@variable::tmax::0",
            "@variable::tmin::0",
            "@variable::vapr::0",
            "@variable::windsp::0",
            "@variable::windht::0",
            "@variable::xhlai::-1",
            "@variable::eo::-1"
          ],
          "output": [],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pet__condition__IF_0__2",
            "type": "lambda"
          },
          "input": [
            "@variable::meevp::-1"
          ],
          "output": [
            "@variable::IF_0::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "petdyn",
            "type": "container"
          },
          "input": [
            "@variable::canht::-1",
            "@variable::clouds::0",
            "@variable::et_alb::-1",
            "@variable::srad::0",
            "@variable::tavg::0",
            "@variable::tdew::0",
            "@variable::tmax::0",
            "@variable::tmin::0",
            "@variable::windsp::0",
            "@variable::xhlai::-1",
            "@variable::eo::-1"
          ],
          "output": [],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pet__condition__IF_0__3",
            "type": "lambda"
          },
          "input": [
            "@variable::meevp::-1"
          ],
          "output": [
            "@variable::IF_0::3"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "petpno",
            "type": "container"
          },
          "input": [
            "@variable::clouds::0",
            "@variable::et_alb::-1",
            "@variable::srad::0",
            "@variable::tavg::0",
            "@variable::tdew::0",
            "@variable::tmax::0",
            "@variable::tmin::0",
            "@variable::windsp::0",
            "@variable::xhlai::-1",
            "@variable::eo::-1"
          ],
          "output": [],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pet__condition__IF_0__4",
            "type": "lambda"
          },
          "input": [
            "@variable::meevp::-1"
          ],
          "output": [
            "@variable::IF_0::4"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "petmey",
            "type": "container"
          },
          "input": [
            "@variable::control::-1",
            "@variable::tavg::0",
            "@variable::windsp::0",
            "@variable::srad::0",
            "@variable::tdew::0",
            "@variable::xhlai::-1",
            "@variable::et_alb::-1",
            "@variable::eo::-1"
          ],
          "output": [],
          "updated": []
        },
        {
          "function": {
            "name": "petpt",
            "type": "container"
          },
          "input": [
            "@variable::et_alb::-1",
            "@variable::srad::0",
            "@variable::tmax::0",
            "@variable::tmin::0",
            "@variable::xhlai::-1",
            "@variable::eo::-1"
          ],
          "output": [],
          "updated": []
        }
      ]
    },
    {
      "name": "@container::mini_PET::@global::petasce",
      "source_refs": [],
      "repeat": false,
      "arguments": [
        "@variable::canht::-1",
        "@variable::doy::-1",
        "@variable::msalb::-1",
        "@variable::meevp::-1",
        "@variable::srad::-1",
        "@variable::tdew::-1",
        "@variable::tmax::-1",
        "@variable::tmin::-1",
        "@variable::windht::-1",
        "@variable::windrun::-1",
        "@variable::xhlai::-1",
        "@variable::xlat::-1",
        "@variable::xelev::-1",
        "@variable::eo::-1"
      ],
      "updated": [
        "@variable::eo::1"
      ],
      "return_value": [],
      "body": [
        {
          "function": {
            "name": "mini_PET__petasce__assign__tavg__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tmax::-1",
            "@variable::tmin::-1"
          ],
          "output": [
            "@variable::tavg::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__patm__0",
            "type": "lambda"
          },
          "input": [
            "@variable::xelev::-1"
          ],
          "output": [
            "@variable::patm::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__psycon__0",
            "type": "lambda"
          },
          "input": [
            "@variable::patm::0"
          ],
          "output": [
            "@variable::psycon::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__udelta__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tavg::0"
          ],
          "output": [
            "@variable::udelta::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__emax__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tmax::-1"
          ],
          "output": [
            "@variable::emax::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__emin__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tmin::-1"
          ],
          "output": [
            "@variable::emin::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__es__0",
            "type": "lambda"
          },
          "input": [
            "@variable::emax::0",
            "@variable::emin::0"
          ],
          "output": [
            "@variable::es::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__ea__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tdew::-1"
          ],
          "output": [
            "@variable::ea::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__rhmin__0",
            "type": "lambda"
          },
          "input": [
            "@variable::ea::0",
            "@variable::emax::0"
          ],
          "output": [
            "@variable::rhmin::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__condition__IF_0__0",
            "type": "lambda"
          },
          "input": [
            "@variable::xhlai::-1"
          ],
          "output": [
            "@variable::IF_0::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__albedo__0",
            "type": "lambda"
          },
          "input": [
            "@variable::msalb::-1"
          ],
          "output": [
            "@variable::albedo::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__albedo__1",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::albedo::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__decision__albedo__2",
            "type": "lambda"
          },
          "input": [
            "@variable::albedo::1",
            "@variable::albedo::0",
            "@variable::IF_0::0"
          ],
          "output": [
            "@variable::albedo::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__rns__0",
            "type": "lambda"
          },
          "input": [
            "@variable::albedo::2",
            "@variable::srad::-1"
          ],
          "output": [
            "@variable::rns::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__pie__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::pie::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__dr__0",
            "type": "lambda"
          },
          "input": [
            "@variable::pie::0",
            "@variable::doy::-1"
          ],
          "output": [
            "@variable::dr::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__ldelta__0",
            "type": "lambda"
          },
          "input": [
            "@variable::pie::0",
            "@variable::doy::-1"
          ],
          "output": [
            "@variable::ldelta::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__ws__0",
            "type": "lambda"
          },
          "input": [
            "@variable::xlat::-1",
            "@variable::pie::0",
            "@variable::ldelta::0"
          ],
          "output": [
            "@variable::ws::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__ra1__0",
            "type": "lambda"
          },
          "input": [
            "@variable::ws::0",
            "@variable::xlat::-1",
            "@variable::pie::0",
            "@variable::ldelta::0"
          ],
          "output": [
            "@variable::ra1::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__ra2__0",
            "type": "lambda"
          },
          "input": [
            "@variable::xlat::-1",
            "@variable::pie::0",
            "@variable::ldelta::0",
            "@variable::ws::0"
          ],
          "output": [
            "@variable::ra2::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__ra__0",
            "type": "lambda"
          },
          "input": [
            "@variable::pie::0",
            "@variable::dr::0",
            "@variable::ra1::0",
            "@variable::ra2::0"
          ],
          "output": [
            "@variable::ra::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__rso__0",
            "type": "lambda"
          },
          "input": [
            "@variable::xelev::-1",
            "@variable::ra::0"
          ],
          "output": [
            "@variable::rso::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__ratio__0",
            "type": "lambda"
          },
          "input": [
            "@variable::srad::-1",
            "@variable::rso::0"
          ],
          "output": [
            "@variable::ratio::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__condition__IF_1__0",
            "type": "lambda"
          },
          "input": [
            "@variable::ratio::0"
          ],
          "output": [
            "@variable::IF_1::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__ratio__1",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::ratio::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__decision__ratio__2",
            "type": "lambda"
          },
          "input": [
            "@variable::ratio::0",
            "@variable::ratio::1",
            "@variable::IF_1::0"
          ],
          "output": [
            "@variable::ratio::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__condition__IF_1__1",
            "type": "lambda"
          },
          "input": [
            "@variable::ratio::2"
          ],
          "output": [
            "@variable::IF_1::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__ratio__3",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::ratio::3"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__decision__ratio__4",
            "type": "lambda"
          },
          "input": [
            "@variable::ratio::2",
            "@variable::ratio::3",
            "@variable::IF_1::1"
          ],
          "output": [
            "@variable::ratio::4"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__fcd__0",
            "type": "lambda"
          },
          "input": [
            "@variable::ratio::4"
          ],
          "output": [
            "@variable::fcd::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__tk4__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tmax::-1",
            "@variable::tmin::-1"
          ],
          "output": [
            "@variable::tk4::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__rnl__0",
            "type": "lambda"
          },
          "input": [
            "@variable::fcd::0",
            "@variable::ea::0",
            "@variable::tk4::0"
          ],
          "output": [
            "@variable::rnl::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__rn__0",
            "type": "lambda"
          },
          "input": [
            "@variable::rns::0",
            "@variable::rnl::0"
          ],
          "output": [
            "@variable::rn::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__g__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::g::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__windsp__0",
            "type": "lambda"
          },
          "input": [
            "@variable::windrun::-1"
          ],
          "output": [
            "@variable::windsp::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__wind2m__0",
            "type": "lambda"
          },
          "input": [
            "@variable::windsp::0",
            "@variable::windht::-1"
          ],
          "output": [
            "@variable::wind2m::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__condition__IF_2__0",
            "type": "lambda"
          },
          "input": [
            "@variable::meevp::-1"
          ],
          "output": [
            "@variable::IF_2::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__cn__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::cn::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__cd__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::cd::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__decision__cn__1",
            "type": "lambda"
          },
          "input": [
            "@variable::cn::0",
            "@variable::cn::-1",
            "@variable::IF_2::0"
          ],
          "output": [
            "@variable::cn::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__decision__cd__1",
            "type": "lambda"
          },
          "input": [
            "@variable::cd::0",
            "@variable::cd::-1",
            "@variable::IF_2::0"
          ],
          "output": [
            "@variable::cd::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__condition__IF_2__1",
            "type": "lambda"
          },
          "input": [
            "@variable::meevp::-1"
          ],
          "output": [
            "@variable::IF_2::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__cn__2",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::cn::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__cd__2",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::cd::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__decision__cn__3",
            "type": "lambda"
          },
          "input": [
            "@variable::cn::1",
            "@variable::cn::2",
            "@variable::IF_2::1"
          ],
          "output": [
            "@variable::cn::3"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__decision__cd__3",
            "type": "lambda"
          },
          "input": [
            "@variable::cd::1",
            "@variable::cd::2",
            "@variable::IF_2::1"
          ],
          "output": [
            "@variable::cd::3"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__refet__0",
            "type": "lambda"
          },
          "input": [
            "@variable::udelta::0",
            "@variable::rn::0",
            "@variable::g::0",
            "@variable::psycon::0",
            "@variable::cn::3",
            "@variable::tavg::0",
            "@variable::wind2m::0",
            "@variable::es::0",
            "@variable::ea::0"
          ],
          "output": [
            "@variable::refet::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__refet__1",
            "type": "lambda"
          },
          "input": [
            "@variable::refet::0",
            "@variable::udelta::0",
            "@variable::psycon::0",
            "@variable::cd::3",
            "@variable::wind2m::0"
          ],
          "output": [
            "@variable::refet::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__refet__2",
            "type": "lambda"
          },
          "input": [
            "@variable::refet::1"
          ],
          "output": [
            "@variable::refet::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": null,
            "type": "container"
          },
          "input": [
            "@literal::string::'spam'",
            "@literal::string::'skc'",
            "@variable::skc::-1"
          ],
          "output": [],
          "updated": []
        },
        {
          "function": {
            "name": null,
            "type": "container"
          },
          "input": [
            "@literal::string::'spam'",
            "@literal::string::'kcbmin'",
            "@variable::kcbmin::-1"
          ],
          "output": [],
          "updated": []
        },
        {
          "function": {
            "name": null,
            "type": "container"
          },
          "input": [
            "@literal::string::'spam'",
            "@literal::string::'kcbmax'",
            "@variable::kcbmax::-1"
          ],
          "output": [],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__condition__IF_3__0",
            "type": "lambda"
          },
          "input": [
            "@variable::xhlai::-1"
          ],
          "output": [
            "@variable::IF_3::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__kcb__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::kcb::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__kcb__1",
            "type": "lambda"
          },
          "input": [
            "@variable::kcbmin::-1",
            "@variable::kcbmax::-1",
            "@variable::skc::-1",
            "@variable::xhlai::-1"
          ],
          "output": [
            "@variable::kcb::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__decision__kcb__2",
            "type": "lambda"
          },
          "input": [
            "@variable::kcb::1",
            "@variable::kcb::0",
            "@variable::IF_3::0"
          ],
          "output": [
            "@variable::kcb::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__wnd__0",
            "type": "lambda"
          },
          "input": [
            "@variable::wind2m::0"
          ],
          "output": [
            "@variable::wnd::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__cht__0",
            "type": "lambda"
          },
          "input": [
            "@variable::canht::-1"
          ],
          "output": [
            "@variable::cht::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__condition__IF_4__0",
            "type": "lambda"
          },
          "input": [
            "@variable::meevp::-1"
          ],
          "output": [
            "@variable::IF_4::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__kcmax__0",
            "type": "lambda"
          },
          "input": [
            "@variable::kcb::2"
          ],
          "output": [
            "@variable::kcmax::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__decision__kcmax__1",
            "type": "lambda"
          },
          "input": [
            "@variable::kcmax::0",
            "@variable::kcmax::-1",
            "@variable::IF_4::0"
          ],
          "output": [
            "@variable::kcmax::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__condition__IF_4__1",
            "type": "lambda"
          },
          "input": [
            "@variable::meevp::-1"
          ],
          "output": [
            "@variable::IF_4::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__kcmax__2",
            "type": "lambda"
          },
          "input": [
            "@variable::wnd::0",
            "@variable::rhmin::0",
            "@variable::cht::0",
            "@variable::kcb::2"
          ],
          "output": [
            "@variable::kcmax::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__decision__kcmax__3",
            "type": "lambda"
          },
          "input": [
            "@variable::kcmax::1",
            "@variable::kcmax::2",
            "@variable::IF_4::1"
          ],
          "output": [
            "@variable::kcmax::3"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__condition__IF_5__0",
            "type": "lambda"
          },
          "input": [
            "@variable::kcb::2",
            "@variable::kcbmin::-1"
          ],
          "output": [
            "@variable::IF_5::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__fc__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::fc::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__fc__1",
            "type": "lambda"
          },
          "input": [
            "@variable::kcb::2",
            "@variable::kcbmin::-1",
            "@variable::kcmax::3",
            "@variable::canht::-1"
          ],
          "output": [
            "@variable::fc::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__decision__fc__2",
            "type": "lambda"
          },
          "input": [
            "@variable::fc::1",
            "@variable::fc::0",
            "@variable::IF_5::0"
          ],
          "output": [
            "@variable::fc::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__fw__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::fw::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__few__0",
            "type": "lambda"
          },
          "input": [
            "@variable::fc::2",
            "@variable::fw::0"
          ],
          "output": [
            "@variable::few::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__ke__0",
            "type": "lambda"
          },
          "input": [
            "@variable::kcmax::3",
            "@variable::kcb::2",
            "@variable::few::0"
          ],
          "output": [
            "@variable::ke::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__kc__0",
            "type": "lambda"
          },
          "input": [
            "@variable::kcb::2",
            "@variable::ke::0"
          ],
          "output": [
            "@variable::kc::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__eo__0",
            "type": "lambda"
          },
          "input": [
            "@variable::kcb::2",
            "@variable::ke::0",
            "@variable::refet::2"
          ],
          "output": [
            "@variable::eo::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petasce__assign__eo__1",
            "type": "lambda"
          },
          "input": [
            "@variable::eo::0"
          ],
          "output": [
            "@variable::eo::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": null,
            "type": "container"
          },
          "input": [
            "@literal::string::'spam'",
            "@literal::string::'refet'",
            "@variable::refet::2"
          ],
          "output": [],
          "updated": []
        },
        {
          "function": {
            "name": null,
            "type": "container"
          },
          "input": [
            "@literal::string::'spam'",
            "@literal::string::'kcb'",
            "@variable::kcb::2"
          ],
          "output": [],
          "updated": []
        },
        {
          "function": {
            "name": null,
            "type": "container"
          },
          "input": [
            "@literal::string::'spam'",
            "@literal::string::'ke'",
            "@variable::ke::0"
          ],
          "output": [],
          "updated": []
        },
        {
          "function": {
            "name": null,
            "type": "container"
          },
          "input": [
            "@literal::string::'spam'",
            "@literal::string::'kc'",
            "@variable::kc::0"
          ],
          "output": [],
          "updated": []
        }
      ]
    },
    {
      "name": "@container::mini_PET::@global::petpen",
      "source_refs": [],
      "repeat": false,
      "arguments": [
        "@variable::clouds::-1",
        "@variable::eoratio::-1",
        "@variable::msalb::-1",
        "@variable::srad::-1",
        "@variable::tavg::-1",
        "@variable::tdew::-1",
        "@variable::tmax::-1",
        "@variable::tmin::-1",
        "@variable::vapr::-1",
        "@variable::windsp::-1",
        "@variable::windht::-1",
        "@variable::xhlai::-1",
        "@variable::eo::-1"
      ],
      "updated": [
        "@variable::xhlai::2",
        "@variable::eo::2"
      ],
      "return_value": [],
      "body": [
        {
          "function": {
            "name": "mini_PET__petpen__assign__shair__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::shair::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__patm__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::patm::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__sbzcon__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::sbzcon::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__lhvap__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tavg::-1"
          ],
          "output": [
            "@variable::lhvap::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__psycon__0",
            "type": "lambda"
          },
          "input": [
            "@variable::shair::0",
            "@variable::patm::0",
            "@variable::lhvap::0"
          ],
          "output": [
            "@variable::psycon::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "@container::mini_PET::@global::vpsat",
            "type": "container"
          },
          "input": [
            "@variable::tmax::-1"
          ],
          "output": [
            "@variable::vpsat_60883::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "@container::mini_PET::@global::vpsat",
            "type": "container"
          },
          "input": [
            "@variable::tmin::-1"
          ],
          "output": [
            "@variable::vpsat_1ab8c::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__esat__0",
            "type": "lambda"
          },
          "input": [
            "@variable::vpsat_60883::0",
            "@variable::vpsat_1ab8c::0"
          ],
          "output": [
            "@variable::esat::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "@container::mini_PET::@global::vpsat",
            "type": "container"
          },
          "input": [
            "@variable::tdew::-1"
          ],
          "output": [
            "@variable::eair::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__condition__IF_0__0",
            "type": "lambda"
          },
          "input": [
            "@variable::vapr::-1"
          ],
          "output": [
            "@variable::IF_0::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__eair__1",
            "type": "lambda"
          },
          "input": [
            "@variable::vapr::-1"
          ],
          "output": [
            "@variable::eair::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__decision__eair__2",
            "type": "lambda"
          },
          "input": [
            "@variable::eair::0",
            "@variable::eair::1",
            "@variable::IF_0::0"
          ],
          "output": [
            "@variable::eair::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__vpd__0",
            "type": "lambda"
          },
          "input": [
            "@variable::esat::0",
            "@variable::eair::2"
          ],
          "output": [
            "@variable::vpd::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "@container::mini_PET::@global::vpslop",
            "type": "container"
          },
          "input": [
            "@variable::tmax::-1"
          ],
          "output": [
            "@variable::vpslop_db18b::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "@container::mini_PET::@global::vpslop",
            "type": "container"
          },
          "input": [
            "@variable::tmin::-1"
          ],
          "output": [
            "@variable::vpslop_b0968::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__s__0",
            "type": "lambda"
          },
          "input": [
            "@variable::vpslop_db18b::0",
            "@variable::vpslop_b0968::0"
          ],
          "output": [
            "@variable::s::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__rt__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tavg::-1"
          ],
          "output": [
            "@variable::rt::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__dair__0",
            "type": "lambda"
          },
          "input": [
            "@variable::patm::0",
            "@variable::eair::2",
            "@variable::rt::0"
          ],
          "output": [
            "@variable::dair::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__vhcair__0",
            "type": "lambda"
          },
          "input": [
            "@variable::dair::0",
            "@variable::shair::0"
          ],
          "output": [
            "@variable::vhcair::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__refht__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::refht::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__windsp_m__0",
            "type": "lambda"
          },
          "input": [
            "@variable::windsp::-1"
          ],
          "output": [
            "@variable::windsp_m::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__k__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::k::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__d__0",
            "type": "lambda"
          },
          "input": [
            "@variable::refht::0"
          ],
          "output": [
            "@variable::d::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__zom__0",
            "type": "lambda"
          },
          "input": [
            "@variable::refht::0"
          ],
          "output": [
            "@variable::zom::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__zoh__0",
            "type": "lambda"
          },
          "input": [
            "@variable::zom::0"
          ],
          "output": [
            "@variable::zoh::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__ra__0",
            "type": "lambda"
          },
          "input": [
            "@variable::windht::-1",
            "@variable::d::0",
            "@variable::zom::0",
            "@variable::zoh::0",
            "@variable::k::0",
            "@variable::windsp_m::0"
          ],
          "output": [
            "@variable::ra::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__rl__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::rl::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__rs__0",
            "type": "lambda"
          },
          "input": [
            "@variable::rl::0"
          ],
          "output": [
            "@variable::rs::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__rs__1",
            "type": "lambda"
          },
          "input": [
            "@variable::rs::0"
          ],
          "output": [
            "@variable::rs::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__g__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::g::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__condition__IF_1__0",
            "type": "lambda"
          },
          "input": [
            "@variable::xhlai::-1"
          ],
          "output": [
            "@variable::IF_1::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__albedo__0",
            "type": "lambda"
          },
          "input": [
            "@variable::msalb::-1"
          ],
          "output": [
            "@variable::albedo::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__albedo__1",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::albedo::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__decision__albedo__2",
            "type": "lambda"
          },
          "input": [
            "@variable::albedo::1",
            "@variable::albedo::0",
            "@variable::IF_1::0"
          ],
          "output": [
            "@variable::albedo::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__tk4__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tmax::-1",
            "@variable::tmin::-1"
          ],
          "output": [
            "@variable::tk4::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__radb__0",
            "type": "lambda"
          },
          "input": [
            "@variable::sbzcon::0",
            "@variable::tk4::0",
            "@variable::eair::2",
            "@variable::clouds::-1"
          ],
          "output": [
            "@variable::radb::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__rnet__0",
            "type": "lambda"
          },
          "input": [
            "@variable::albedo::2",
            "@variable::srad::-1",
            "@variable::radb::0"
          ],
          "output": [
            "@variable::rnet::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__rnetmg__0",
            "type": "lambda"
          },
          "input": [
            "@variable::rnet::0",
            "@variable::g::0"
          ],
          "output": [
            "@variable::rnetmg::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__et0__0",
            "type": "lambda"
          },
          "input": [
            "@variable::s::0",
            "@variable::rnetmg::0",
            "@variable::dair::0",
            "@variable::shair::0",
            "@variable::vpd::0",
            "@variable::ra::0",
            "@variable::psycon::0",
            "@variable::rs::1"
          ],
          "output": [
            "@variable::et0::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__et0__1",
            "type": "lambda"
          },
          "input": [
            "@variable::et0::0",
            "@variable::lhvap::0"
          ],
          "output": [
            "@variable::et0::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__condition__IF_2__0",
            "type": "lambda"
          },
          "input": [
            "@variable::xhlai::-1"
          ],
          "output": [
            "@variable::IF_2::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__xhlai__0",
            "type": "lambda"
          },
          "input": [
            "@variable::xhlai::-1"
          ],
          "output": [
            "@variable::xhlai::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__xhlai__1",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::xhlai::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__decision__xhlai__2",
            "type": "lambda"
          },
          "input": [
            "@variable::xhlai::1",
            "@variable::xhlai::0",
            "@variable::IF_2::0"
          ],
          "output": [
            "@variable::xhlai::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__kc__0",
            "type": "lambda"
          },
          "input": [
            "@variable::eoratio::-1",
            "@variable::xhlai::2"
          ],
          "output": [
            "@variable::kc::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__eo__0",
            "type": "lambda"
          },
          "input": [
            "@variable::et0::1",
            "@variable::kc::0"
          ],
          "output": [
            "@variable::eo::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__eo__1",
            "type": "lambda"
          },
          "input": [
            "@variable::eo::0"
          ],
          "output": [
            "@variable::eo::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpen__assign__eo__2",
            "type": "lambda"
          },
          "input": [
            "@variable::eo::1"
          ],
          "output": [
            "@variable::eo::2"
          ],
          "updated": []
        }
      ]
    },
    {
      "name": "@container::mini_PET::@global::petdyn",
      "source_refs": [],
      "repeat": false,
      "arguments": [
        "@variable::canht::-1",
        "@variable::clouds::-1",
        "@variable::msalb::-1",
        "@variable::srad::-1",
        "@variable::tavg::-1",
        "@variable::tdew::-1",
        "@variable::tmax::-1",
        "@variable::tmin::-1",
        "@variable::windsp::-1",
        "@variable::xhlai::-1",
        "@variable::eo::-1"
      ],
      "updated": [
        "@variable::eo::2"
      ],
      "return_value": [],
      "body": [
        {
          "function": {
            "name": "mini_PET__petdyn__assign__shair__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::shair::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__patm__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::patm::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__sbzcon__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::sbzcon::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__lhvap__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tavg::-1"
          ],
          "output": [
            "@variable::lhvap::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__psycon__0",
            "type": "lambda"
          },
          "input": [
            "@variable::shair::0",
            "@variable::patm::0",
            "@variable::lhvap::0"
          ],
          "output": [
            "@variable::psycon::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "@container::mini_PET::@global::vpsat",
            "type": "container"
          },
          "input": [
            "@variable::tmax::-1"
          ],
          "output": [
            "@variable::vpsat_00ba9::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "@container::mini_PET::@global::vpsat",
            "type": "container"
          },
          "input": [
            "@variable::tmin::-1"
          ],
          "output": [
            "@variable::vpsat_c8f50::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__esat__0",
            "type": "lambda"
          },
          "input": [
            "@variable::vpsat_00ba9::0",
            "@variable::vpsat_c8f50::0"
          ],
          "output": [
            "@variable::esat::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "@container::mini_PET::@global::vpsat",
            "type": "container"
          },
          "input": [
            "@variable::tdew::-1"
          ],
          "output": [
            "@variable::eair::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__vpd__0",
            "type": "lambda"
          },
          "input": [
            "@variable::esat::0",
            "@variable::eair::0"
          ],
          "output": [
            "@variable::vpd::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "@container::mini_PET::@global::vpslop",
            "type": "container"
          },
          "input": [
            "@variable::tmax::-1"
          ],
          "output": [
            "@variable::vpslop_2749b::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "@container::mini_PET::@global::vpslop",
            "type": "container"
          },
          "input": [
            "@variable::tmin::-1"
          ],
          "output": [
            "@variable::vpslop_0af7a::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__s__0",
            "type": "lambda"
          },
          "input": [
            "@variable::vpslop_2749b::0",
            "@variable::vpslop_0af7a::0"
          ],
          "output": [
            "@variable::s::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__rt__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tavg::-1"
          ],
          "output": [
            "@variable::rt::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__dair__0",
            "type": "lambda"
          },
          "input": [
            "@variable::patm::0",
            "@variable::eair::0",
            "@variable::rt::0"
          ],
          "output": [
            "@variable::dair::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__vhcair__0",
            "type": "lambda"
          },
          "input": [
            "@variable::dair::0",
            "@variable::shair::0"
          ],
          "output": [
            "@variable::vhcair::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__windsp_m__0",
            "type": "lambda"
          },
          "input": [
            "@variable::windsp::-1"
          ],
          "output": [
            "@variable::windsp_m::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__k__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::k::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__condition__IF_0__0",
            "type": "lambda"
          },
          "input": [
            "@variable::canht::-1"
          ],
          "output": [
            "@variable::IF_0::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__zcrop__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::zcrop::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__dcrop__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::dcrop::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__zomc__0",
            "type": "lambda"
          },
          "input": [
            "@variable::dcrop::0"
          ],
          "output": [
            "@variable::zomc::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__zovc__0",
            "type": "lambda"
          },
          "input": [
            "@variable::zomc::0"
          ],
          "output": [
            "@variable::zovc::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__dfao__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::dfao::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__zomf__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::zomf::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__zohf__0",
            "type": "lambda"
          },
          "input": [
            "@variable::zomf::0"
          ],
          "output": [
            "@variable::zohf::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__zcrop__1",
            "type": "lambda"
          },
          "input": [
            "@variable::canht::-1"
          ],
          "output": [
            "@variable::zcrop::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__dcrop__1",
            "type": "lambda"
          },
          "input": [
            "@variable::canht::-1"
          ],
          "output": [
            "@variable::dcrop::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__zomc__1",
            "type": "lambda"
          },
          "input": [
            "@variable::canht::-1",
            "@variable::dcrop::1"
          ],
          "output": [
            "@variable::zomc::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__zovc__1",
            "type": "lambda"
          },
          "input": [
            "@variable::zomc::1"
          ],
          "output": [
            "@variable::zovc::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__dfao__1",
            "type": "lambda"
          },
          "input": [
            "@variable::canht::-1"
          ],
          "output": [
            "@variable::dfao::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__zomf__1",
            "type": "lambda"
          },
          "input": [
            "@variable::canht::-1"
          ],
          "output": [
            "@variable::zomf::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__zohf__1",
            "type": "lambda"
          },
          "input": [
            "@variable::zomf::1"
          ],
          "output": [
            "@variable::zohf::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__decision__zcrop__2",
            "type": "lambda"
          },
          "input": [
            "@variable::zcrop::1",
            "@variable::zcrop::0",
            "@variable::IF_0::0"
          ],
          "output": [
            "@variable::zcrop::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__decision__dfao__2",
            "type": "lambda"
          },
          "input": [
            "@variable::dfao::1",
            "@variable::dfao::0",
            "@variable::IF_0::0"
          ],
          "output": [
            "@variable::dfao::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__decision__zohf__2",
            "type": "lambda"
          },
          "input": [
            "@variable::zohf::1",
            "@variable::zohf::0",
            "@variable::IF_0::0"
          ],
          "output": [
            "@variable::zohf::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__decision__zomf__2",
            "type": "lambda"
          },
          "input": [
            "@variable::zomf::1",
            "@variable::zomf::0",
            "@variable::IF_0::0"
          ],
          "output": [
            "@variable::zomf::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__decision__dcrop__2",
            "type": "lambda"
          },
          "input": [
            "@variable::dcrop::1",
            "@variable::dcrop::0",
            "@variable::IF_0::0"
          ],
          "output": [
            "@variable::dcrop::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__decision__zomc__2",
            "type": "lambda"
          },
          "input": [
            "@variable::zomc::1",
            "@variable::zomc::0",
            "@variable::IF_0::0"
          ],
          "output": [
            "@variable::zomc::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__decision__zovc__2",
            "type": "lambda"
          },
          "input": [
            "@variable::zovc::1",
            "@variable::zovc::0",
            "@variable::IF_0::0"
          ],
          "output": [
            "@variable::zovc::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__dlh__0",
            "type": "lambda"
          },
          "input": [
            "@variable::canht::-1",
            "@variable::xhlai::-1"
          ],
          "output": [
            "@variable::dlh::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__condition__IF_1__0",
            "type": "lambda"
          },
          "input": [
            "@variable::xhlai::-1"
          ],
          "output": [
            "@variable::IF_1::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__zolh__0",
            "type": "lambda"
          },
          "input": [
            "@variable::canht::-1",
            "@variable::xhlai::-1"
          ],
          "output": [
            "@variable::zolh::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__zolh__1",
            "type": "lambda"
          },
          "input": [
            "@variable::canht::-1",
            "@variable::dlh::0"
          ],
          "output": [
            "@variable::zolh::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__decision__zolh__2",
            "type": "lambda"
          },
          "input": [
            "@variable::zolh::1",
            "@variable::zolh::0",
            "@variable::IF_1::0"
          ],
          "output": [
            "@variable::zolh::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__wind2c__0",
            "type": "lambda"
          },
          "input": [
            "@variable::windsp_m::0",
            "@variable::zcrop::2",
            "@variable::dcrop::2",
            "@variable::zomc::2"
          ],
          "output": [
            "@variable::wind2c::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__ra__0",
            "type": "lambda"
          },
          "input": [
            "@variable::zcrop::2",
            "@variable::dcrop::2",
            "@variable::zomc::2",
            "@variable::zovc::2",
            "@variable::k::0",
            "@variable::wind2c::0"
          ],
          "output": [
            "@variable::ra::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__hts__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::hts::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__rasoil__0",
            "type": "lambda"
          },
          "input": [
            "@variable::hts::0",
            "@variable::k::0",
            "@variable::windsp_m::0"
          ],
          "output": [
            "@variable::rasoil::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__zos__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::zos::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__maxht__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::maxht::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__rb__0",
            "type": "lambda"
          },
          "input": [
            "@variable::zos::0",
            "@variable::maxht::0",
            "@variable::k::0",
            "@variable::windsp_m::0"
          ],
          "output": [
            "@variable::rb::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__ac__0",
            "type": "lambda"
          },
          "input": [
            "@variable::xhlai::-1"
          ],
          "output": [
            "@variable::ac::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__asvar__0",
            "type": "lambda"
          },
          "input": [
            "@variable::ac::0"
          ],
          "output": [
            "@variable::asvar::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__raero__0",
            "type": "lambda"
          },
          "input": [
            "@variable::ac::0",
            "@variable::ra::0",
            "@variable::asvar::0",
            "@variable::rasoil::0"
          ],
          "output": [
            "@variable::raero::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__rl__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::rl::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__condition__IF_2__0",
            "type": "lambda"
          },
          "input": [
            "@variable::xhlai::-1"
          ],
          "output": [
            "@variable::IF_2::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__rs__0",
            "type": "lambda"
          },
          "input": [
            "@variable::rl::0",
            "@variable::xhlai::-1"
          ],
          "output": [
            "@variable::rs::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__rs__1",
            "type": "lambda"
          },
          "input": [
            "@variable::rl::0"
          ],
          "output": [
            "@variable::rs::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__decision__rs__2",
            "type": "lambda"
          },
          "input": [
            "@variable::rs::1",
            "@variable::rs::0",
            "@variable::IF_2::0"
          ],
          "output": [
            "@variable::rs::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__rs__3",
            "type": "lambda"
          },
          "input": [
            "@variable::rs::2"
          ],
          "output": [
            "@variable::rs::3"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__rtot__0",
            "type": "lambda"
          },
          "input": [
            "@variable::ac::0",
            "@variable::rs::3",
            "@variable::asvar::0",
            "@variable::rb::0"
          ],
          "output": [
            "@variable::rtot::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__g__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::g::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__condition__IF_3__0",
            "type": "lambda"
          },
          "input": [
            "@variable::xhlai::-1"
          ],
          "output": [
            "@variable::IF_3::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__albedo__0",
            "type": "lambda"
          },
          "input": [
            "@variable::msalb::-1"
          ],
          "output": [
            "@variable::albedo::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__albedo__1",
            "type": "lambda"
          },
          "input": [
            "@variable::msalb::-1",
            "@variable::xhlai::-1"
          ],
          "output": [
            "@variable::albedo::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__decision__albedo__2",
            "type": "lambda"
          },
          "input": [
            "@variable::albedo::1",
            "@variable::albedo::0",
            "@variable::IF_3::0"
          ],
          "output": [
            "@variable::albedo::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__tk4__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tmax::-1",
            "@variable::tmin::-1"
          ],
          "output": [
            "@variable::tk4::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__radb__0",
            "type": "lambda"
          },
          "input": [
            "@variable::sbzcon::0",
            "@variable::tk4::0",
            "@variable::eair::0",
            "@variable::clouds::-1"
          ],
          "output": [
            "@variable::radb::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__rnet__0",
            "type": "lambda"
          },
          "input": [
            "@variable::albedo::2",
            "@variable::srad::-1",
            "@variable::radb::0"
          ],
          "output": [
            "@variable::rnet::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__rnetmg__0",
            "type": "lambda"
          },
          "input": [
            "@variable::rnet::0",
            "@variable::g::0"
          ],
          "output": [
            "@variable::rnetmg::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__eo__0",
            "type": "lambda"
          },
          "input": [
            "@variable::s::0",
            "@variable::rnetmg::0",
            "@variable::dair::0",
            "@variable::shair::0",
            "@variable::vpd::0",
            "@variable::raero::0",
            "@variable::psycon::0",
            "@variable::rtot::0"
          ],
          "output": [
            "@variable::eo::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__eo__1",
            "type": "lambda"
          },
          "input": [
            "@variable::eo::0",
            "@variable::lhvap::0"
          ],
          "output": [
            "@variable::eo::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petdyn__assign__eo__2",
            "type": "lambda"
          },
          "input": [
            "@variable::eo::1"
          ],
          "output": [
            "@variable::eo::2"
          ],
          "updated": []
        }
      ]
    },
    {
      "name": "@container::mini_PET::@global::petpt",
      "source_refs": [],
      "repeat": false,
      "arguments": [
        "@variable::msalb::-1",
        "@variable::srad::-1",
        "@variable::tmax::-1",
        "@variable::tmin::-1",
        "@variable::xhlai::-1",
        "@variable::eo::-1"
      ],
      "updated": [
        "@variable::eo::5"
      ],
      "return_value": [],
      "body": [
        {
          "function": {
            "name": "mini_PET__petpt__assign__td__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tmax::-1",
            "@variable::tmin::-1"
          ],
          "output": [
            "@variable::td::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpt__condition__IF_0__0",
            "type": "lambda"
          },
          "input": [
            "@variable::xhlai::-1"
          ],
          "output": [
            "@variable::IF_0::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpt__assign__albedo__0",
            "type": "lambda"
          },
          "input": [
            "@variable::msalb::-1"
          ],
          "output": [
            "@variable::albedo::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpt__assign__albedo__1",
            "type": "lambda"
          },
          "input": [
            "@variable::msalb::-1",
            "@variable::xhlai::-1"
          ],
          "output": [
            "@variable::albedo::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpt__decision__albedo__2",
            "type": "lambda"
          },
          "input": [
            "@variable::albedo::1",
            "@variable::albedo::0",
            "@variable::IF_0::0"
          ],
          "output": [
            "@variable::albedo::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpt__assign__slang__0",
            "type": "lambda"
          },
          "input": [
            "@variable::srad::-1"
          ],
          "output": [
            "@variable::slang::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpt__assign__eeq__0",
            "type": "lambda"
          },
          "input": [
            "@variable::slang::0",
            "@variable::albedo::2",
            "@variable::td::0"
          ],
          "output": [
            "@variable::eeq::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpt__assign__eo__0",
            "type": "lambda"
          },
          "input": [
            "@variable::eeq::0"
          ],
          "output": [
            "@variable::eo::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpt__condition__IF_1__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tmax::-1"
          ],
          "output": [
            "@variable::IF_1::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpt__assign__eo__1",
            "type": "lambda"
          },
          "input": [
            "@variable::eeq::0",
            "@variable::tmax::-1"
          ],
          "output": [
            "@variable::eo::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpt__decision__eo__2",
            "type": "lambda"
          },
          "input": [
            "@variable::eo::0",
            "@variable::eo::1",
            "@variable::IF_1::0"
          ],
          "output": [
            "@variable::eo::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpt__condition__IF_1__1",
            "type": "lambda"
          },
          "input": [
            "@variable::tmax::-1"
          ],
          "output": [
            "@variable::IF_1::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpt__assign__eo__3",
            "type": "lambda"
          },
          "input": [
            "@variable::eeq::0",
            "@variable::tmax::-1"
          ],
          "output": [
            "@variable::eo::3"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpt__decision__eo__4",
            "type": "lambda"
          },
          "input": [
            "@variable::eo::2",
            "@variable::eo::3",
            "@variable::IF_1::1"
          ],
          "output": [
            "@variable::eo::4"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpt__assign__eo__5",
            "type": "lambda"
          },
          "input": [
            "@variable::eo::4"
          ],
          "output": [
            "@variable::eo::5"
          ],
          "updated": []
        }
      ]
    },
    {
      "name": "@container::mini_PET::@global::petpno",
      "source_refs": [],
      "repeat": false,
      "arguments": [
        "@variable::clouds::-1",
        "@variable::msalb::-1",
        "@variable::srad::-1",
        "@variable::tavg::-1",
        "@variable::tdew::-1",
        "@variable::tmax::-1",
        "@variable::tmin::-1",
        "@variable::windsp::-1",
        "@variable::xhlai::-1",
        "@variable::eo::-1"
      ],
      "updated": [
        "@variable::eo::1"
      ],
      "return_value": [],
      "body": [
        {
          "function": {
            "name": "mini_PET__petpno__assign__shair__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::shair::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__assign__patm__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::patm::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__assign__sbzcon__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::sbzcon::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__assign__lhvap__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tavg::-1"
          ],
          "output": [
            "@variable::lhvap::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__assign__psycon__0",
            "type": "lambda"
          },
          "input": [
            "@variable::shair::0",
            "@variable::patm::0",
            "@variable::lhvap::0"
          ],
          "output": [
            "@variable::psycon::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "@container::mini_PET::@global::vpsat",
            "type": "container"
          },
          "input": [
            "@variable::tmax::-1"
          ],
          "output": [
            "@variable::vpsat_4cc77::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "@container::mini_PET::@global::vpsat",
            "type": "container"
          },
          "input": [
            "@variable::tmin::-1"
          ],
          "output": [
            "@variable::vpsat_0247c::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__assign__esat__0",
            "type": "lambda"
          },
          "input": [
            "@variable::vpsat_4cc77::0",
            "@variable::vpsat_0247c::0"
          ],
          "output": [
            "@variable::esat::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "@container::mini_PET::@global::vpsat",
            "type": "container"
          },
          "input": [
            "@variable::tdew::-1"
          ],
          "output": [
            "@variable::eair::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__assign__vpd__0",
            "type": "lambda"
          },
          "input": [
            "@variable::esat::0",
            "@variable::eair::0"
          ],
          "output": [
            "@variable::vpd::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "@container::mini_PET::@global::vpslop",
            "type": "container"
          },
          "input": [
            "@variable::tmax::-1"
          ],
          "output": [
            "@variable::vpslop_0d762::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "@container::mini_PET::@global::vpslop",
            "type": "container"
          },
          "input": [
            "@variable::tmin::-1"
          ],
          "output": [
            "@variable::vpslop_7a69c::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__assign__s__0",
            "type": "lambda"
          },
          "input": [
            "@variable::vpslop_0d762::0",
            "@variable::vpslop_7a69c::0"
          ],
          "output": [
            "@variable::s::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__assign__rt__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tavg::-1"
          ],
          "output": [
            "@variable::rt::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__assign__dair__0",
            "type": "lambda"
          },
          "input": [
            "@variable::rt::0",
            "@variable::patm::0",
            "@variable::eair::0"
          ],
          "output": [
            "@variable::dair::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__assign__vhcair__0",
            "type": "lambda"
          },
          "input": [
            "@variable::dair::0",
            "@variable::shair::0"
          ],
          "output": [
            "@variable::vhcair::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__assign__g__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::g::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__condition__IF_0__0",
            "type": "lambda"
          },
          "input": [
            "@variable::xhlai::-1"
          ],
          "output": [
            "@variable::IF_0::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__assign__albedo__0",
            "type": "lambda"
          },
          "input": [
            "@variable::msalb::-1"
          ],
          "output": [
            "@variable::albedo::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__assign__albedo__1",
            "type": "lambda"
          },
          "input": [
            "@variable::msalb::-1",
            "@variable::xhlai::-1"
          ],
          "output": [
            "@variable::albedo::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__decision__albedo__2",
            "type": "lambda"
          },
          "input": [
            "@variable::albedo::1",
            "@variable::albedo::0",
            "@variable::IF_0::0"
          ],
          "output": [
            "@variable::albedo::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__assign__tk4__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tmax::-1",
            "@variable::tmin::-1"
          ],
          "output": [
            "@variable::tk4::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__assign__radb__0",
            "type": "lambda"
          },
          "input": [
            "@variable::sbzcon::0",
            "@variable::tk4::0",
            "@variable::eair::0",
            "@variable::clouds::-1"
          ],
          "output": [
            "@variable::radb::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__assign__rnet__0",
            "type": "lambda"
          },
          "input": [
            "@variable::albedo::2",
            "@variable::srad::-1",
            "@variable::radb::0"
          ],
          "output": [
            "@variable::rnet::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__assign__wfnfao__0",
            "type": "lambda"
          },
          "input": [
            "@variable::windsp::-1"
          ],
          "output": [
            "@variable::wfnfao::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__assign__rnetmg__0",
            "type": "lambda"
          },
          "input": [
            "@variable::rnet::0",
            "@variable::g::0",
            "@variable::lhvap::0"
          ],
          "output": [
            "@variable::rnetmg::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__assign__eo__0",
            "type": "lambda"
          },
          "input": [
            "@variable::s::0",
            "@variable::rnetmg::0",
            "@variable::psycon::0",
            "@variable::wfnfao::0",
            "@variable::vpd::0"
          ],
          "output": [
            "@variable::eo::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petpno__assign__eo__1",
            "type": "lambda"
          },
          "input": [
            "@variable::eo::0"
          ],
          "output": [
            "@variable::eo::1"
          ],
          "updated": []
        }
      ]
    },
    {
      "name": "@container::mini_PET::@global::petmey",
      "source_refs": [],
      "repeat": false,
      "arguments": [
        "@variable::control::-1",
        "@variable::meantemp::-1",
        "@variable::dailywindrun::-1",
        "@variable::solarirradiance::-1",
        "@variable::meandewpt::-1",
        "@variable::xhlai::-1",
        "@variable::msalb::-1",
        "@variable::eo::-1"
      ],
      "updated": [
        "@variable::eo::2"
      ],
      "return_value": [],
      "body": [
        {
          "function": {
            "name": "mini_PET__petmey__assign__yrdoy__0",
            "type": "lambda"
          },
          "input": [
            "@variable::yrdoy::-1"
          ],
          "output": [
            "@variable::yrdoy::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__yrsim__0",
            "type": "lambda"
          },
          "input": [
            "@variable::yrsim::-1"
          ],
          "output": [
            "@variable::yrsim::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__crop__0",
            "type": "lambda"
          },
          "input": [
            "@variable::crop::-1"
          ],
          "output": [
            "@variable::crop::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "@container::mini_PET::@global::yr_doy",
            "type": "container"
          },
          "input": [
            "@variable::yrdoy::0",
            "@variable::year::-1",
            "@variable::jday::-1"
          ],
          "output": [],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__tav__0",
            "type": "lambda"
          },
          "input": [
            "@variable::meantemp::-1"
          ],
          "output": [
            "@variable::tav::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__condition__IF_0__0",
            "type": "lambda"
          },
          "input": [
            "@variable::yrdoy::0",
            "@variable::yrsim::0"
          ],
          "output": [
            "@variable::IF_0::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__tavt__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tav::0"
          ],
          "output": [
            "@variable::tavt::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__tavy2__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tav::0"
          ],
          "output": [
            "@variable::tavy2::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__tavy1__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tav::0"
          ],
          "output": [
            "@variable::tavy1::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__tavy2__1",
            "type": "lambda"
          },
          "input": [
            "@variable::tavy1::-1"
          ],
          "output": [
            "@variable::tavy2::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__tavy1__1",
            "type": "lambda"
          },
          "input": [
            "@variable::tavt::-1"
          ],
          "output": [
            "@variable::tavy1::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__tavt__1",
            "type": "lambda"
          },
          "input": [
            "@variable::tav::0"
          ],
          "output": [
            "@variable::tavt::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__decision__tavy2__2",
            "type": "lambda"
          },
          "input": [
            "@variable::tavy2::1",
            "@variable::tavy2::0",
            "@variable::IF_0::0"
          ],
          "output": [
            "@variable::tavy2::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__decision__tavt__2",
            "type": "lambda"
          },
          "input": [
            "@variable::tavt::1",
            "@variable::tavt::0",
            "@variable::IF_0::0"
          ],
          "output": [
            "@variable::tavt::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__decision__tavy1__2",
            "type": "lambda"
          },
          "input": [
            "@variable::tavy1::1",
            "@variable::tavy1::0",
            "@variable::IF_0::0"
          ],
          "output": [
            "@variable::tavy1::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__t3day__0",
            "type": "lambda"
          },
          "input": [
            "@variable::tavy2::2",
            "@variable::tavy1::2",
            "@variable::tav::0"
          ],
          "output": [
            "@variable::t3day::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__condition__IF_1__0",
            "type": "lambda"
          },
          "input": [
            "@variable::crop::0"
          ],
          "output": [
            "@variable::IF_1::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__albedo__0",
            "type": "lambda"
          },
          "input": [
            "@variable::xhlai::-1"
          ],
          "output": [
            "@variable::albedo::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__albedo__1",
            "type": "lambda"
          },
          "input": [
            "@variable::msalb::-1",
            "@variable::xhlai::-1"
          ],
          "output": [
            "@variable::albedo::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__decision__albedo__2",
            "type": "lambda"
          },
          "input": [
            "@variable::albedo::1",
            "@variable::albedo::0",
            "@variable::IF_1::0"
          ],
          "output": [
            "@variable::albedo::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__coeff_a__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::coeff_a::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__coeff_b__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::coeff_b::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__coeff_c__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::coeff_c::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__coeff_d__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::coeff_d::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__coeff_winda__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::coeff_winda::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__coeff_windb__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::coeff_windb::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__stefboltz__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::stefboltz::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__pi__0",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::pi::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__latheatvap__0",
            "type": "lambda"
          },
          "input": [
            "@variable::meantemp::-1"
          ],
          "output": [
            "@variable::latheatvap::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__delta__0",
            "type": "lambda"
          },
          "input": [
            "@variable::meantemp::-1"
          ],
          "output": [
            "@variable::delta::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__dodpg__0",
            "type": "lambda"
          },
          "input": [
            "@variable::delta::0"
          ],
          "output": [
            "@variable::dodpg::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__radj__0",
            "type": "lambda"
          },
          "input": [
            "@variable::jday::-1",
            "@variable::pi::0"
          ],
          "output": [
            "@variable::radj::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__maxirradiance__0",
            "type": "lambda"
          },
          "input": [
            "@variable::radj::0"
          ],
          "output": [
            "@variable::maxirradiance::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__vpsatvar__0",
            "type": "lambda"
          },
          "input": [
            "@variable::meantemp::-1"
          ],
          "output": [
            "@variable::vpsatvar::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__vpdew__0",
            "type": "lambda"
          },
          "input": [
            "@variable::meandewpt::-1"
          ],
          "output": [
            "@variable::vpdew::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__vpdew__1",
            "type": "lambda"
          },
          "input": [
            "@variable::vpdew::0",
            "@variable::vpsatvar::0"
          ],
          "output": [
            "@variable::vpdew::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__vpd__0",
            "type": "lambda"
          },
          "input": [
            "@variable::vpsatvar::0",
            "@variable::vpdew::1"
          ],
          "output": [
            "@variable::vpd::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__netemissivity__0",
            "type": "lambda"
          },
          "input": [
            "@variable::coeff_c::0",
            "@variable::coeff_d::0",
            "@variable::vpdew::1"
          ],
          "output": [
            "@variable::netemissivity::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__fac1__0",
            "type": "lambda"
          },
          "input": [
            "@variable::coeff_a::0",
            "@variable::solarirradiance::-1",
            "@variable::maxirradiance::0",
            "@variable::coeff_b::0"
          ],
          "output": [
            "@variable::fac1::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__radlon__0",
            "type": "lambda"
          },
          "input": [
            "@variable::fac1::0",
            "@variable::netemissivity::0",
            "@variable::stefboltz::0",
            "@variable::meantemp::-1"
          ],
          "output": [
            "@variable::radlon::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__netrad__0",
            "type": "lambda"
          },
          "input": [
            "@variable::albedo::2",
            "@variable::solarirradiance::-1",
            "@variable::radlon::0"
          ],
          "output": [
            "@variable::netrad::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__gflux__0",
            "type": "lambda"
          },
          "input": [
            "@variable::meantemp::-1",
            "@variable::t3day::0"
          ],
          "output": [
            "@variable::gflux::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__windfunc__0",
            "type": "lambda"
          },
          "input": [
            "@variable::coeff_winda::0",
            "@variable::coeff_windb::0",
            "@variable::dailywindrun::-1"
          ],
          "output": [
            "@variable::windfunc::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__eo__0",
            "type": "lambda"
          },
          "input": [
            "@variable::dodpg::0",
            "@variable::netrad::0",
            "@variable::gflux::0",
            "@variable::windfunc::0",
            "@variable::vpd::0",
            "@variable::latheatvap::0"
          ],
          "output": [
            "@variable::eo::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__condition__IF_2__0",
            "type": "lambda"
          },
          "input": [
            "@variable::eo::0"
          ],
          "output": [
            "@variable::IF_2::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__assign__eo__1",
            "type": "lambda"
          },
          "input": [],
          "output": [
            "@variable::eo::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__petmey__decision__eo__2",
            "type": "lambda"
          },
          "input": [
            "@variable::eo::0",
            "@variable::eo::1",
            "@variable::IF_2::0"
          ],
          "output": [
            "@variable::eo::2"
          ],
          "updated": []
        }
      ]
    },
    {
      "name": "@container::mini_PET::@global::pse",
      "source_refs": [],
      "repeat": false,
      "arguments": [
        "@variable::eo::-1",
        "@variable::ksevap::-1",
        "@variable::xlai::-1",
        "@variable::eos::-1"
      ],
      "updated": [
        "@variable::eos::7"
      ],
      "return_value": [],
      "body": [
        {
          "function": {
            "name": null,
            "type": "container"
          },
          "input": [
            "@literal::string::'spam'",
            "@literal::string::'ke'",
            "@variable::ke::-1"
          ],
          "output": [],
          "updated": []
        },
        {
          "function": {
            "name": null,
            "type": "container"
          },
          "input": [
            "@literal::string::'spam'",
            "@literal::string::'refet'",
            "@variable::refet::-1"
          ],
          "output": [],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pse__condition__IF_0__0",
            "type": "lambda"
          },
          "input": [
            "@variable::ke::-1"
          ],
          "output": [
            "@variable::IF_0::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pse__assign__eos__0",
            "type": "lambda"
          },
          "input": [
            "@variable::ke::-1",
            "@variable::refet::-1"
          ],
          "output": [
            "@variable::eos::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pse__decision__eos__1",
            "type": "lambda"
          },
          "input": [
            "@variable::eos::-1",
            "@variable::eos::0",
            "@variable::IF_0::0"
          ],
          "output": [
            "@variable::eos::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pse__condition__IF_0__1",
            "type": "lambda"
          },
          "input": [
            "@variable::ksevap::-1"
          ],
          "output": [
            "@variable::IF_0::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pse__condition__IF_0__2",
            "type": "lambda"
          },
          "input": [
            "@variable::xlai::-1"
          ],
          "output": [
            "@variable::IF_0::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pse__assign__eos__2",
            "type": "lambda"
          },
          "input": [
            "@variable::eo::-1",
            "@variable::xlai::-1"
          ],
          "output": [
            "@variable::eos::2"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pse__assign__eos__3",
            "type": "lambda"
          },
          "input": [
            "@variable::eo::-1",
            "@variable::xlai::-1"
          ],
          "output": [
            "@variable::eos::3"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pse__decision__eos__4",
            "type": "lambda"
          },
          "input": [
            "@variable::eos::3",
            "@variable::eos::2",
            "@variable::IF_0::2"
          ],
          "output": [
            "@variable::eos::4"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pse__assign__eos__5",
            "type": "lambda"
          },
          "input": [
            "@variable::eo::-1",
            "@variable::ksevap::-1",
            "@variable::xlai::-1"
          ],
          "output": [
            "@variable::eos::5"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pse__decision__IF_0__3",
            "type": "lambda"
          },
          "input": [
            "@variable::IF_0::1",
            "@variable::IF_0::2",
            "@variable::IF_0::1"
          ],
          "output": [
            "@variable::IF_0::3"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pse__decision__eos__6",
            "type": "lambda"
          },
          "input": [
            "@variable::eos::5",
            "@variable::eos::4",
            "@variable::IF_0::1"
          ],
          "output": [
            "@variable::eos::6"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__pse__assign__eos__7",
            "type": "lambda"
          },
          "input": [
            "@variable::eos::6"
          ],
          "output": [
            "@variable::eos::7"
          ],
          "updated": []
        }
      ]
    },
    {
      "name": "@container::mini_PET::@global::flood_evap",
      "source_refs": [],
      "repeat": false,
      "arguments": [
        "@variable::xlai::-1",
        "@variable::eo::-1",
        "@variable::ef::-1"
      ],
      "updated": [
        "@variable::ef::2"
      ],
      "return_value": [],
      "body": [
        {
          "function": {
            "name": "mini_PET__flood_evap__assign__ef__0",
            "type": "lambda"
          },
          "input": [
            "@variable::eo::-1",
            "@variable::xlai::-1"
          ],
          "output": [
            "@variable::ef::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__flood_evap__condition__IF_0__0",
            "type": "lambda"
          },
          "input": [
            "@variable::xlai::-1"
          ],
          "output": [
            "@variable::IF_0::0"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__flood_evap__assign__ef__1",
            "type": "lambda"
          },
          "input": [
            "@variable::eo::-1",
            "@variable::xlai::-1"
          ],
          "output": [
            "@variable::ef::1"
          ],
          "updated": []
        },
        {
          "function": {
            "name": "mini_PET__flood_evap__decision__ef__2",
            "type": "lambda"
          },
          "input": [
            "@variable::ef::0",
            "@variable::ef::1",
            "@variable::IF_0::0"
          ],
          "output": [
            "@variable::ef::2"
          ],
          "updated": []
        }
      ]
    }
  ],
  "variables": [
    {
      "name": "@variable::mini_PET::yr_doy::yrdoy::-1",
      "source_refs": [],
      "domain": {
        "name": "integer",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::yr_doy::yr::-1",
      "source_refs": [],
      "domain": {
        "name": "integer",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::yr_doy::doy::-1",
      "source_refs": [],
      "domain": {
        "name": "integer",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::yr_doy::yr::0",
      "source_refs": [],
      "domain": {
        "name": "integer",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::yr_doy::doy::0",
      "source_refs": [],
      "domain": {
        "name": "integer",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::vpslop::t::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::vpslop::vpsat_f8087::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::vpslop::vpslop_return::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::vpsat::t::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::vpsat::vpsat_return::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::control::-1",
      "source_refs": [],
      "domain": {
        "name": "controltype",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::et_alb::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::xhlai::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::meevp::-1",
      "source_refs": [],
      "domain": {
        "name": "string",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::weather::-1",
      "source_refs": [],
      "domain": {
        "name": "weathertype",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::eoratio::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::canht::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::eo::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::clouds::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::srad::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::tavg::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::tdew::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::tmax::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::tmin::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::vapr::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::windht::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::windsp::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::windrun::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::xlat::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::xelev::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::yrdoy::0",
      "source_refs": [],
      "domain": {
        "name": "integer",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::IF_0::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::IF_0::1",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::IF_0::2",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::IF_0::3",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pet::IF_0::4",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::canht::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::doy::-1",
      "source_refs": [],
      "domain": {
        "name": "integer",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::msalb::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::meevp::-1",
      "source_refs": [],
      "domain": {
        "name": "string",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::srad::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::tdew::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::tmax::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::tmin::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::windht::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::windrun::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::xhlai::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::xlat::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::xelev::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::eo::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::tavg::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::patm::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": true
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::psycon::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::udelta::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::emax::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::emin::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::es::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::ea::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::rhmin::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::IF_0::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::albedo::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::albedo::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::albedo::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::rns::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::pie::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::dr::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::ldelta::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::ws::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::ra1::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::ra2::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::ra::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::rso::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::ratio::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::IF_1::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::ratio::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::ratio::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::IF_1::1",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::ratio::3",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::ratio::4",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::fcd::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::tk4::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::rnl::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::rn::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::g::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::windsp::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::wind2m::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::IF_2::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::cn::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::cd::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::cn::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::cd::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::IF_2::1",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::cn::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::cd::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::cn::3",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::cd::3",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::refet::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::refet::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::refet::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::IF_3::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::kcb::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::kcb::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::kcb::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::wnd::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::cht::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::IF_4::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::kcmax::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::kcmax::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::IF_4::1",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::kcmax::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::kcmax::3",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::IF_5::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::fc::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::fc::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::fc::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::fw::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::few::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::ke::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::kc::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::eo::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petasce::eo::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::clouds::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::eoratio::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::msalb::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::srad::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::tavg::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::tdew::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::tmax::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::tmin::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::vapr::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::windsp::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::windht::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::xhlai::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::eo::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::shair::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": true
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::patm::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": true
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::sbzcon::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": true
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::lhvap::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::psycon::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::vpsat_60883::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::vpsat_1ab8c::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::esat::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::eair::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::IF_0::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::eair::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::eair::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::vpd::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::vpslop_db18b::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::vpslop_b0968::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::s::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::rt::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::dair::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::vhcair::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::refht::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::windsp_m::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::k::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::d::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::zom::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::zoh::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::ra::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::rl::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::rs::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::rs::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::g::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::IF_1::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::albedo::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::albedo::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::albedo::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::tk4::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::radb::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::rnet::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::rnetmg::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::et0::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::et0::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::IF_2::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::xhlai::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::xhlai::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::xhlai::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::kc::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::eo::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::eo::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpen::eo::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::canht::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::clouds::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::msalb::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::srad::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::tavg::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::tdew::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::tmax::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::tmin::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::windsp::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::xhlai::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::eo::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::shair::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": true
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::patm::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": true
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::sbzcon::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": true
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::lhvap::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::psycon::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::vpsat_00ba9::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::vpsat_c8f50::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::esat::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::eair::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::vpd::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::vpslop_2749b::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::vpslop_0af7a::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::s::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::rt::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::dair::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::vhcair::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::windsp_m::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::k::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::IF_0::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::zcrop::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::dcrop::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::zomc::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::zovc::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::dfao::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::zomf::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::zohf::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::zcrop::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::dcrop::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::zomc::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::zovc::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::dfao::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::zomf::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::zohf::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::zcrop::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::dfao::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::zohf::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::zomf::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::dcrop::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::zomc::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::zovc::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::dlh::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::IF_1::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::zolh::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::zolh::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::zolh::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::wind2c::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::ra::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::hts::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::rasoil::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::zos::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::maxht::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::rb::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::ac::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::asvar::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::raero::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::rl::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::IF_2::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::rs::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::rs::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::rs::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::rs::3",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::rtot::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::g::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::IF_3::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::albedo::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::albedo::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::albedo::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::tk4::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::radb::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::rnet::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::rnetmg::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::eo::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::eo::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petdyn::eo::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::msalb::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::srad::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::tmax::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::tmin::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::xhlai::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::eo::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::td::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::IF_0::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::albedo::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::albedo::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::albedo::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::slang::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::eeq::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::eo::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::IF_1::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::eo::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::eo::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::IF_1::1",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::eo::3",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::eo::4",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpt::eo::5",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::clouds::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::msalb::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::srad::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::tavg::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::tdew::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::tmax::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::tmin::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::windsp::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::xhlai::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::eo::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::shair::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": true
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::patm::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": true
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::sbzcon::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": true
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::lhvap::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::psycon::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::vpsat_4cc77::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::vpsat_0247c::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::esat::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::eair::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::vpd::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::vpslop_0d762::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::vpslop_7a69c::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::s::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::rt::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::dair::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::vhcair::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::g::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::IF_0::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::albedo::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::albedo::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::albedo::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::tk4::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::radb::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::rnet::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::wfnfao::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::rnetmg::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::eo::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petpno::eo::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::control::-1",
      "source_refs": [],
      "domain": {
        "name": "controltype",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::meantemp::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::dailywindrun::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::solarirradiance::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::meandewpt::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::xhlai::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::msalb::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::eo::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::yrdoy::0",
      "source_refs": [],
      "domain": {
        "name": "integer",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::yrsim::0",
      "source_refs": [],
      "domain": {
        "name": "integer",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::crop::0",
      "source_refs": [],
      "domain": {
        "name": "string",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::tav::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::IF_0::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::tavt::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::tavy2::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::tavy1::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::tavy2::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::tavy1::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::tavt::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::tavy2::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::tavt::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::tavy1::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::t3day::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::IF_1::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::albedo::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::albedo::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::albedo::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::coeff_a::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::coeff_b::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::coeff_c::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::coeff_d::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::coeff_winda::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::coeff_windb::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::stefboltz::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::pi::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::latheatvap::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::delta::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::dodpg::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::radj::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::maxirradiance::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::vpsatvar::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::vpdew::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::vpdew::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::vpd::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::netemissivity::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::fac1::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::radlon::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::netrad::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::gflux::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::windfunc::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::eo::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::IF_2::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::eo::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::petmey::eo::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pse::eo::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pse::ksevap::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pse::xlai::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pse::eos::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pse::IF_0::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pse::eos::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pse::eos::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pse::IF_0::1",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pse::IF_0::2",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pse::eos::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pse::eos::3",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pse::eos::4",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pse::eos::5",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pse::IF_0::3",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pse::eos::6",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::pse::eos::7",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::flood_evap::xlai::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::flood_evap::eo::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::flood_evap::ef::-1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::flood_evap::ef::0",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::flood_evap::IF_0::0",
      "source_refs": [],
      "domain": {
        "name": "boolean",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::flood_evap::ef::1",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    },
    {
      "name": "@variable::mini_PET::flood_evap::ef::2",
      "source_refs": [],
      "domain": {
        "name": "float",
        "type": "type",
        "mutable": false
      },
      "domain_constraint": "(and (> v -infty) (< v infty))"
    }
  ],
  "start": [
    "@container::mini_PET::@global::flood_evap"
  ],
  "grounding": [],
  "types": [],
  "source": [
    "mini_PET.for"
  ],
  "source_comments": {
    "$file_head": [
      "C=======================================================================\n",
      "C=======================================================================\n",
      "C  VPSLOP, Real Function, N.B. Pickering, 4/1/90\n",
      "C  Calculates slope of saturated vapor pressure versus temperature curve\n",
      "C  using Classius-Clapeyron equation (see Brutsaert, 1982 p. 41)\n",
      "!-----------------------------------------------------------------------\n",
      "!  Called by: ETSOLV, PETPEN, TRATIO\n",
      "!  Calls:     VPSAT\n",
      "!-----------------------------------------------------------------------\n",
      "C  Input : T (C)\n",
      "C  Output: VPSLOP\n",
      "C=======================================================================\n"
    ],
    "$file_foot": [
      "C=======================================================================\n"
    ],
    "YR_DOY": {
      "head": [
        "!***********************************************************************\n",
        "!  POTENTIAL EVAPOTRANSPIRATION\n",
        "!     File PET.for\n",
        "!***********************************************************************\n",
        "!  Includes modules:\n",
        "!MEEVP Routine Description\n",
        "!   A  PETASCE ASCE Standardized Reference Evapotranspiration Equation\n",
        "!                for tall reference (alfalfa) with dual FAO-56 crop\n",
        "!                coefficient\n",
        "!   F  PETPEN  FAO Penman-Monteith (FAO-56) potential evapotranspiration,\n",
        "!                with KC = 1.0\n",
        "!   G  PETASCE ASCE Standardized Reference Evapotranspiration Equation\n",
        "!                for short reference (grass) with dual FAO-56 crop\n",
        "!                coefficient\n",
        "!   R  PETPT   Calculates Priestly-Taylor potential evapotranspiration\n",
        "!                (default method)\n",
        "!   D  PETDYN  Dynamic Penman-Monteith, pot. evapotranspiration, with\n",
        "!                dynamic input of LAI, crop height effects on Ra and Rs\n",
        "!   P  PETPNO  FAO Penman (FAO-24) potential evapotranspiration\n",
        "!   M  PETMEY  \"Standard reference evaporation calculation for inland\n",
        "!                south eastern Australia\" By Wayne Meyer 1993\n",
        "!  Also includes these subroutines:\n",
        "!      PSE        Potential soil evaporation\n",
        "!      FLOOD_EVAP Evaporation from water surface\n",
        "C=======================================================================\n",
        "C=======================================================================\n",
        "C  YR_DOY, Subroutine, N.B. Pickering, 09/13/91\n",
        "C  Converts YRDOY to YR and DOY.\n",
        "C-----------------------------------------------------------------------\n",
        "C  Input : YRDOY\n",
        "C  Output: YR,DOY\n",
        "C=======================================================================\n"
      ],
      "neck": [],
      "foot": [
        "C=======================================================================\n",
        "C=======================================================================\n",
        "C  VPSAT, Real Function, N.B. Pickering, 4/1/90\n",
        "C  Calculates saturated vapor pressure of air (Tetens, 1930).\n",
        "!-----------------------------------------------------------------------\n",
        "!  Called by: CANPET, HMET, VPSLOP, PETPEN\n",
        "!  Calls:     None\n",
        "!-----------------------------------------------------------------------\n",
        "C  Input : T (C)\n",
        "C  Output: VPSAT (Pa)\n",
        "C=======================================================================\n"
      ],
      "internal": {}
    },
    "VPSLOP": {
      "head": [
        "C=======================================================================\n",
        "C=======================================================================\n",
        "C  VPSLOP, Real Function, N.B. Pickering, 4/1/90\n",
        "C  Calculates slope of saturated vapor pressure versus temperature curve\n",
        "C  using Classius-Clapeyron equation (see Brutsaert, 1982 p. 41)\n",
        "!-----------------------------------------------------------------------\n",
        "!  Called by: ETSOLV, PETPEN, TRATIO\n",
        "!  Calls:     VPSAT\n",
        "!-----------------------------------------------------------------------\n",
        "C  Input : T (C)\n",
        "C  Output: VPSLOP\n",
        "C=======================================================================\n"
      ],
      "neck": [],
      "foot": [
        "C=======================================================================\n",
        "! VPSAT Variables\n",
        "!-----------------------------------------------------------------------\n",
        "! T     Air temperature (oC)\n",
        "! VPSAT Saturated vapor pressure of air (Pa)\n",
        "C=======================================================================\n",
        "C=======================================================================\n",
        "!     SUBROUTINE PET\n",
        "!     Calls appropriate potential evapotranspiration routine\n"
      ],
      "internal": {}
    },
    "VPSAT": {
      "head": [
        "C=======================================================================\n",
        "C=======================================================================\n",
        "C  VPSAT, Real Function, N.B. Pickering, 4/1/90\n",
        "C  Calculates saturated vapor pressure of air (Tetens, 1930).\n",
        "!-----------------------------------------------------------------------\n",
        "!  Called by: CANPET, HMET, VPSLOP, PETPEN\n",
        "!  Calls:     None\n",
        "!-----------------------------------------------------------------------\n",
        "C  Input : T (C)\n",
        "C  Output: VPSAT (Pa)\n",
        "C=======================================================================\n"
      ],
      "neck": [],
      "foot": [
        "C=======================================================================\n",
        "C=======================================================================\n",
        "C  PETASCE, Subroutine, K. R. Thorp\n",
        "C  Calculates reference evapotranspiration using the ASCE\n",
        "C  Standardized Reference Evapotranspiration Equation.\n",
        "C  Adjusts reference evapotranspiration to potential evapotranspiration\n",
        "C  using dual crop coefficients.\n",
        "C  DeJonge K. C., Thorp, K. R., 2017. Implementing standardized refernce\n",
        "C  evapotranspiration and dual crop coefficient approach in the DSSAT\n",
        "C  Cropping System Model. Transactions of the ASABE. 60(6):1965-1981.\n",
        "!-----------------------------------------------------------------------\n",
        "C  REVISION HISTORY\n",
        "C  08/19/2013 KRT Added the ASCE Standardize Reference ET approach\n",
        "C  01/26/2015 KRT Added the dual crop coefficient (Kc) approach\n",
        "C  01/18/2018 KRT Merged ASCE dual Kc ET method into develop branch\n",
        "!-----------------------------------------------------------------------\n",
        "!  Called from:   PET\n",
        "!  Calls:         None\n",
        "C=======================================================================\n"
      ],
      "internal": {}
    },
    "PET": {
      "head": [
        "C=======================================================================\n",
        "! VPSAT Variables\n",
        "!-----------------------------------------------------------------------\n",
        "! T     Air temperature (oC)\n",
        "! VPSAT Saturated vapor pressure of air (Pa)\n",
        "C=======================================================================\n",
        "C=======================================================================\n",
        "!     SUBROUTINE PET\n",
        "!     Calls appropriate potential evapotranspiration routine\n"
      ],
      "neck": [],
      "foot": [
        "!-------------------------------------------------------------------\n",
        "C=======================================================================\n",
        "C=======================================================================\n",
        "C  PETPEN, Subroutine, N.B. Pickering\n",
        "C  Calculates FAO-56 Penman-Monteith potential evapotranspiration, exactly\n",
        "C  grass reference, with place for optional Kc, need this Kc in species.\n",
        "!-----------------------------------------------------------------------\n",
        "C  REVISION HISTORY\n",
        "C  02/19/1992 NBP Written\n",
        "C  11/04/1993 NBP Renamed routine PET to PETPEN.  Changed XLAI to XHLAI\n",
        "C               Added XHLAI .LE. 0.0 statement.\n",
        "C  05/13/1994 NBP Converted all vapor pressures to Pa.  Rearranged.\n",
        "C  09/16/1994 NBP Added limits to prevent EO and ES (PE) < 0.\n",
        "C  10/17/1997 CHP Updated for modular format.\n",
        "C  09/01/1999 GH  Incorporated into CROPGRO\n",
        "C  05/06/2002 WMB Fixed Stefan-Boltzmann constant\n",
        "C  01/15/2003 KJB discarded old Penman FAO-24 (it is much too stressful)\n",
        "C     replaced with Penman FAO-56, exactly grass reference, with explicit\n",
        "C     LAI 2.88, height 0.12 m, Rs = 100/(0.5*2.88)\n",
        "C  01/15/2003 KJB:  THREE ISSUES TO ADDRESS:\n",
        "C  1) USING FIXED ALBEDO, BECAUSE THAT IS HOW REFERENCE IS DEFINED\n",
        "C  2)  PRESENTLY USING A LOCKED-IN VALUE OF 1.1 TO GIVE KC OF 1.1\n",
        "C  I WOULD LIKE TO SEE OPTION OF SPECIES INPUT OF KC=1.1 TO 1.3\n",
        "C  3) WINDHT WAS IN OLD, APPARENTLY 2.0, NO LONGER HERE.  ???\n",
        "C  02/06/2003 KJB/CHP Added EORATIO as input from plant routines.\n",
        "!  07/24/2006 CHP Use MSALB instead of SALB (includes mulch and soil\n",
        "!                 water effects on albedo)\n",
        "!  09/19/2006 SSJ Fixed error in REFHT calc as noted below.\n",
        "!  08/25/2011 CHP Use measured vapor pressure (VAPR), if available\n",
        "!-----------------------------------------------------------------------\n",
        "!  Called from:   PET\n",
        "!  Calls:         None\n",
        "C=======================================================================\n"
      ],
      "internal": {}
    },
    "PETASCE": {
      "head": [
        "C=======================================================================\n",
        "C=======================================================================\n",
        "C  PETASCE, Subroutine, K. R. Thorp\n",
        "C  Calculates reference evapotranspiration using the ASCE\n",
        "C  Standardized Reference Evapotranspiration Equation.\n",
        "C  Adjusts reference evapotranspiration to potential evapotranspiration\n",
        "C  using dual crop coefficients.\n",
        "C  DeJonge K. C., Thorp, K. R., 2017. Implementing standardized refernce\n",
        "C  evapotranspiration and dual crop coefficient approach in the DSSAT\n",
        "C  Cropping System Model. Transactions of the ASABE. 60(6):1965-1981.\n",
        "!-----------------------------------------------------------------------\n",
        "C  REVISION HISTORY\n",
        "C  08/19/2013 KRT Added the ASCE Standardize Reference ET approach\n",
        "C  01/26/2015 KRT Added the dual crop coefficient (Kc) approach\n",
        "C  01/18/2018 KRT Merged ASCE dual Kc ET method into develop branch\n",
        "!-----------------------------------------------------------------------\n",
        "!  Called from:   PET\n",
        "!  Calls:         None\n",
        "C=======================================================================\n"
      ],
      "neck": [
        "!-----------------------------------------------------------------------\n"
      ],
      "foot": [
        "!-----------------------------------------------------------------------\n",
        "!     PETPEN VARIABLES:\n",
        "!-----------------------------------------------------------------------\n",
        "! ALBEDO  Reflectance of soil-crop surface (fraction)\n",
        "! CLOUDS  Relative cloudiness factor (0-1)\n",
        "! DAIR\n",
        "! EAIR    Vapor pressure at dewpoint (Pa)\n",
        "! EO      Potential evapotranspiration rate (mm/d)\n",
        "! ESAT    Vapor pressure of air (Pa)\n",
        "! G       Soil heat flux density term (MJ/m2/d)\n",
        "! LHVAP   Latent head of water vaporization (J/kg)\n",
        "! PATM     = 101300.0\n",
        "! PSYCON  Psychrometric constant (Pa/K)\n",
        "! RADB    Net outgoing thermal radiation (MJ/m2/d)\n",
        "! RNET    Net radiation (MJ/m2/d)\n",
        "! RNETMG  Radiant energy portion of Penman equation (mm/d)\n",
        "! RT\n",
        "! S       Rate of change of saturated vapor pressure of air with\n",
        "!           temperature (Pa/K)\n",
        "! MSALB   Soil albedo with mulch and soil water effects (fraction)\n",
        "! SBZCON   Stefan Boltzmann constant = 4.903E-9 (MJ/m2/d)\n",
        "! SHAIR    = 1005.0\n",
        "! SRAD    Solar radiation (MJ/m2-d)\n",
        "! TAVG    Average daily temperature (\u00ef\u00bf\u00bdC)\n",
        "! TDEW    Dewpoint temperature (\u00ef\u00bf\u00bdC)\n",
        "! TK4     Temperature to 4th power ((oK)**4)\n",
        "! TMAX    Maximum daily temperature (\u00ef\u00bf\u00bdC)\n",
        "! TMIN    Minimum daily temperature (\u00ef\u00bf\u00bdC)\n",
        "! Tprev   3-day sum of average temperature:\n",
        "! VHCAIR\n",
        "! VPD     Vapor pressure deficit (Pa)\n",
        "! VPSAT   Saturated vapor pressure of air (Pa)\n",
        "! VPSLOP  Calculates slope of saturated vapor pressure versus\n",
        "!           temperature curve (Pa/K)\n",
        "! WFNFAO  FAO 24 hour wind function\n",
        "! WIND2   Windspeed at 2m reference height. (km/d)\n",
        "! WINDSP  Wind speed at 2m (km/d)\n",
        "! XHLAI   Leaf area index (m2[leaf] / m2[ground])\n",
        "!-----------------------------------------------------------------------\n",
        "!     END SUBROUTINE PETPEN\n",
        "!-----------------------------------------------------------------------\n",
        "C=======================================================================\n",
        "C  PETDYN Subroutine, K. J. BOOTE, F. SAU, M. BOSTIC\n",
        "C  Calculates PENMAN-MONTEITH potential evapotranspiration\n",
        "C  using dynamic CANHT, LAI, along with wind effects on Ra, Rs\n",
        "C  Steiner approach for Ra recommended, but FAO and Lhomme commented out\n",
        "C  Sunlit LAI effect on Rs is recommended, but rl/(0.5*LAI) would work\n",
        "C  Weighting used for Ra and Rs between soil and crop.  Need to changee\n",
        "C  two constants (HTS and zos) if you change from sunlit LAI to other.\n",
        "C-----------------------------------------------------------------------\n",
        "C  REVISION HISTORY\n",
        "C  11/19/01 TO 1/15/02  Written By Boote, Sau, McNair\n",
        "C  01/15/03 Moved from V3.5 trial to V4.0  by K. J. Boote\n",
        "!  07/24/2006 CHP Use MSALB instead of SALB (includes mulch and soil\n",
        "!                 water effects on albedo)\n",
        "!  Called from:   PET\n",
        "!  Calls:         None\n",
        "C=======================================================================\n"
      ],
      "internal": {}
    },
    "PETPEN": {
      "head": [
        "!-------------------------------------------------------------------\n",
        "C=======================================================================\n",
        "C=======================================================================\n",
        "C  PETPEN, Subroutine, N.B. Pickering\n",
        "C  Calculates FAO-56 Penman-Monteith potential evapotranspiration, exactly\n",
        "C  grass reference, with place for optional Kc, need this Kc in species.\n",
        "!-----------------------------------------------------------------------\n",
        "C  REVISION HISTORY\n",
        "C  02/19/1992 NBP Written\n",
        "C  11/04/1993 NBP Renamed routine PET to PETPEN.  Changed XLAI to XHLAI\n",
        "C               Added XHLAI .LE. 0.0 statement.\n",
        "C  05/13/1994 NBP Converted all vapor pressures to Pa.  Rearranged.\n",
        "C  09/16/1994 NBP Added limits to prevent EO and ES (PE) < 0.\n",
        "C  10/17/1997 CHP Updated for modular format.\n",
        "C  09/01/1999 GH  Incorporated into CROPGRO\n",
        "C  05/06/2002 WMB Fixed Stefan-Boltzmann constant\n",
        "C  01/15/2003 KJB discarded old Penman FAO-24 (it is much too stressful)\n",
        "C     replaced with Penman FAO-56, exactly grass reference, with explicit\n",
        "C     LAI 2.88, height 0.12 m, Rs = 100/(0.5*2.88)\n",
        "C  01/15/2003 KJB:  THREE ISSUES TO ADDRESS:\n",
        "C  1) USING FIXED ALBEDO, BECAUSE THAT IS HOW REFERENCE IS DEFINED\n",
        "C  2)  PRESENTLY USING A LOCKED-IN VALUE OF 1.1 TO GIVE KC OF 1.1\n",
        "C  I WOULD LIKE TO SEE OPTION OF SPECIES INPUT OF KC=1.1 TO 1.3\n",
        "C  3) WINDHT WAS IN OLD, APPARENTLY 2.0, NO LONGER HERE.  ???\n",
        "C  02/06/2003 KJB/CHP Added EORATIO as input from plant routines.\n",
        "!  07/24/2006 CHP Use MSALB instead of SALB (includes mulch and soil\n",
        "!                 water effects on albedo)\n",
        "!  09/19/2006 SSJ Fixed error in REFHT calc as noted below.\n",
        "!  08/25/2011 CHP Use measured vapor pressure (VAPR), if available\n",
        "!-----------------------------------------------------------------------\n",
        "!  Called from:   PET\n",
        "!  Calls:         None\n",
        "C=======================================================================\n"
      ],
      "neck": [
        "!-----------------------------------------------------------------------\n"
      ],
      "foot": [
        "!     PETPEN VARIABLES:  Nearly same as PETPEN above\n",
        "C=======================================================================\n",
        "C  PETPT, Subroutine, J.T. Ritchie\n",
        "C  Calculates Priestly-Taylor potential evapotranspiration\n",
        "C-----------------------------------------------------------------------\n",
        "C  REVISION HISTORY\n",
        "C  ??/??/19?? JR  Written\n",
        "C  11/04/1993 NBP Modified\n",
        "C  10/17/1997 CHP Updated for modular format.\n",
        "C  09/01/1999 GH  Incorporated into CROPGRO\n",
        "!  07/24/2006 CHP Use MSALB instead of SALB (includes mulch and soil\n",
        "!                 water effects on albedo)\n",
        "!-----------------------------------------------------------------------\n",
        "!  Called by:   WATBAL\n",
        "!  Calls:       None\n",
        "C=======================================================================\n"
      ],
      "internal": {}
    },
    "PETDYN": {
      "head": [
        "!-----------------------------------------------------------------------\n",
        "!     PETPEN VARIABLES:\n",
        "!-----------------------------------------------------------------------\n",
        "! ALBEDO  Reflectance of soil-crop surface (fraction)\n",
        "! CLOUDS  Relative cloudiness factor (0-1)\n",
        "! DAIR\n",
        "! EAIR    Vapor pressure at dewpoint (Pa)\n",
        "! EO      Potential evapotranspiration rate (mm/d)\n",
        "! ESAT    Vapor pressure of air (Pa)\n",
        "! G       Soil heat flux density term (MJ/m2/d)\n",
        "! LHVAP   Latent head of water vaporization (J/kg)\n",
        "! PATM     = 101300.0\n",
        "! PSYCON  Psychrometric constant (Pa/K)\n",
        "! RADB    Net outgoing thermal radiation (MJ/m2/d)\n",
        "! RNET    Net radiation (MJ/m2/d)\n",
        "! RNETMG  Radiant energy portion of Penman equation (mm/d)\n",
        "! RT\n",
        "! S       Rate of change of saturated vapor pressure of air with\n",
        "!           temperature (Pa/K)\n",
        "! MSALB   Soil albedo with mulch and soil water effects (fraction)\n",
        "! SBZCON   Stefan Boltzmann constant = 4.903E-9 (MJ/m2/d)\n",
        "! SHAIR    = 1005.0\n",
        "! SRAD    Solar radiation (MJ/m2-d)\n",
        "! TAVG    Average daily temperature (\u00ef\u00bf\u00bdC)\n",
        "! TDEW    Dewpoint temperature (\u00ef\u00bf\u00bdC)\n",
        "! TK4     Temperature to 4th power ((oK)**4)\n",
        "! TMAX    Maximum daily temperature (\u00ef\u00bf\u00bdC)\n",
        "! TMIN    Minimum daily temperature (\u00ef\u00bf\u00bdC)\n",
        "! Tprev   3-day sum of average temperature:\n",
        "! VHCAIR\n",
        "! VPD     Vapor pressure deficit (Pa)\n",
        "! VPSAT   Saturated vapor pressure of air (Pa)\n",
        "! VPSLOP  Calculates slope of saturated vapor pressure versus\n",
        "!           temperature curve (Pa/K)\n",
        "! WFNFAO  FAO 24 hour wind function\n",
        "! WIND2   Windspeed at 2m reference height. (km/d)\n",
        "! WINDSP  Wind speed at 2m (km/d)\n",
        "! XHLAI   Leaf area index (m2[leaf] / m2[ground])\n",
        "!-----------------------------------------------------------------------\n",
        "!     END SUBROUTINE PETPEN\n",
        "!-----------------------------------------------------------------------\n",
        "C=======================================================================\n",
        "C  PETDYN Subroutine, K. J. BOOTE, F. SAU, M. BOSTIC\n",
        "C  Calculates PENMAN-MONTEITH potential evapotranspiration\n",
        "C  using dynamic CANHT, LAI, along with wind effects on Ra, Rs\n",
        "C  Steiner approach for Ra recommended, but FAO and Lhomme commented out\n",
        "C  Sunlit LAI effect on Rs is recommended, but rl/(0.5*LAI) would work\n",
        "C  Weighting used for Ra and Rs between soil and crop.  Need to changee\n",
        "C  two constants (HTS and zos) if you change from sunlit LAI to other.\n",
        "C-----------------------------------------------------------------------\n",
        "C  REVISION HISTORY\n",
        "C  11/19/01 TO 1/15/02  Written By Boote, Sau, McNair\n",
        "C  01/15/03 Moved from V3.5 trial to V4.0  by K. J. Boote\n",
        "!  07/24/2006 CHP Use MSALB instead of SALB (includes mulch and soil\n",
        "!                 water effects on albedo)\n",
        "!  Called from:   PET\n",
        "!  Calls:         None\n",
        "C=======================================================================\n"
      ],
      "neck": [
        "C  Calculates Penman-Monteith evapotranspiration\n",
        "!-----------------------------------------------------------------------\n"
      ],
      "foot": [
        "!-----------------------------------------------------------------------\n",
        "!     PETPT VARIABLES:\n",
        "!-----------------------------------------------------------------------\n",
        "! ALBEDO  Reflectance of soil-crop surface (fraction)\n",
        "! EEQ     Equilibrium evaporation (mm/d)\n",
        "! EO      Potential evapotranspiration rate (mm/d)\n",
        "! MSALB   Soil albedo with mulch and soil water effects (fraction)\n",
        "! SLANG   Solar radiation\n",
        "! SRAD    Solar radiation (MJ/m2-d)\n",
        "! TD      Approximation of average daily temperature (\u00ef\u00bf\u00bdC)\n",
        "! TMAX    Maximum daily temperature (\u00ef\u00bf\u00bdC)\n",
        "! TMIN    Minimum daily temperature (\u00ef\u00bf\u00bdC)\n",
        "! XHLAI   Leaf area index (m2[leaf] / m2[ground])\n",
        "!-----------------------------------------------------------------------\n",
        "!     END SUBROUTINE PETPT\n",
        "C=======================================================================\n",
        "C=======================================================================\n",
        "C  PETPNO, Subroutine, N.B. Pickering\n",
        "C  Calculates FAO-24 Penman potential evapotranspiration (without\n",
        "C  correction)--grass reference.\n",
        "!-----------------------------------------------------------------------\n",
        "C  REVISION HISTORY\n",
        "C  02/19/1992 NBP Written\n",
        "C  11/04/1993 NBP Renamed routine PET to PETPEN.  Changed XLAI to XHLAI\n",
        "C               Added XHLAI .LE. 0.0 statement.\n",
        "C  05/13/1994 NBP Converted all vapor pressures to Pa.  Rearranged.\n",
        "C  09/16/1994 NBP Added limits to prevent EO and ES (PE) < 0.\n",
        "C  10/17/1997 CHP Updated for modular format.\n",
        "C  09/01/1999 GH  Incorporated into CROPGRO\n",
        "C  05/06/2002 WMB Fixed Stefan-Boltzmann constant\n",
        "!  07/24/2006 CHP Use MSALB instead of SALB (includes mulch and soil\n",
        "!                 water effects on albedo)\n",
        "!-----------------------------------------------------------------------\n",
        "!  Called from:   PET\n",
        "!  Calls:         None\n",
        "C=======================================================================\n"
      ],
      "internal": {}
    },
    "PETPT": {
      "head": [
        "!     PETPEN VARIABLES:  Nearly same as PETPEN above\n",
        "C=======================================================================\n",
        "C  PETPT, Subroutine, J.T. Ritchie\n",
        "C  Calculates Priestly-Taylor potential evapotranspiration\n",
        "C-----------------------------------------------------------------------\n",
        "C  REVISION HISTORY\n",
        "C  ??/??/19?? JR  Written\n",
        "C  11/04/1993 NBP Modified\n",
        "C  10/17/1997 CHP Updated for modular format.\n",
        "C  09/01/1999 GH  Incorporated into CROPGRO\n",
        "!  07/24/2006 CHP Use MSALB instead of SALB (includes mulch and soil\n",
        "!                 water effects on albedo)\n",
        "!-----------------------------------------------------------------------\n",
        "!  Called by:   WATBAL\n",
        "!  Calls:       None\n",
        "C=======================================================================\n"
      ],
      "neck": [],
      "foot": [
        "!-----------------------------------------------------------------------\n",
        "!     PETPEN VARIABLES:\n",
        "!-----------------------------------------------------------------------\n",
        "! ALBEDO  Reflectance of soil-crop surface (fraction)\n",
        "! CLOUDS  Relative cloudiness factor (0-1)\n",
        "! DAIR\n",
        "! EAIR    Vapor pressure at dewpoint (Pa)\n",
        "! EO      Potential evapotranspiration rate (mm/d)\n",
        "! ESAT    Vapor pressure of air (Pa)\n",
        "! G       Soil heat flux density term (MJ/m2/d)\n",
        "! LHVAP   Latent head of water vaporization (J/kg)\n",
        "! PATM     = 101300.0\n",
        "! PSYCON  Psychrometric constant (Pa/K)\n",
        "! RADB    Net outgoing thermal radiation (MJ/m2/d)\n",
        "! RNET    Net radiation (MJ/m2/d)\n",
        "! RNETMG  Radiant energy portion of Penman equation (mm/d)\n",
        "! RT\n",
        "! S       Rate of change of saturated vapor pressure of air with\n",
        "!           temperature (Pa/K)\n",
        "! MSALB   Soil albedo with mulch and soil water effects (fraction)\n",
        "! SBZCON   Stefan Boltzmann constant = 4.093E-9 (MJ/m2/d)\n",
        "! SHAIR    = 1005.0\n",
        "! SRAD    Solar radiation (MJ/m2-d)\n",
        "! TAVG    Average daily temperature (\u00ef\u00bf\u00bdC)\n",
        "! TDEW    Dewpoint temperature (\u00ef\u00bf\u00bdC)\n",
        "! TK4     Temperature to 4th power ((oK)**4)\n",
        "! TMAX    Maximum daily temperature (\u00ef\u00bf\u00bdC)\n",
        "! TMIN    Minimum daily temperature (\u00ef\u00bf\u00bdC)\n",
        "! VHCAIR\n",
        "! VPD     Vapor pressure deficit (Pa)\n",
        "! VPSAT   Saturated vapor pressure of air (Pa)\n",
        "! VPSLOP  Calculates slope of saturated vapor pressure versus\n",
        "!           temperature curve (Pa/K)\n",
        "! WFNFAO  FAO 24 hour wind function\n",
        "! WIND2   Windspeed at 2m reference height. (km/d)\n",
        "! WINDSP  Wind speed at 2m (km/d)\n",
        "! XHLAI   Leaf area index (m2[leaf] / m2[ground])\n",
        "!-----------------------------------------------------------------------\n",
        "!     END SUBROUTINE PETPNO\n",
        "!-----------------------------------------------------------------------\n",
        "C=======================================================================\n",
        "C=======================================================================\n",
        "C  PETMEY, Subroutine\n",
        "!  Copyright(c) CSIRO 2000C  Calculates soil-plant-atmosphere interface\n",
        "!  energy balance components.\n",
        "C-----------------------------------------------------------------------\n",
        "C  REVISION       HISTORY\n",
        "C-----------------------------------------------------------------------\n",
        "C  Called by: Main\n",
        "C=============================================================================\n",
        "!  Routine to calculate Potential Evapotranspiration (ET) from daily         !\n",
        "!  weather data.                                                             !\n",
        "!                                                                            !\n",
        "!  Uses coefficients and methods as per                                      !\n",
        "!  \"Standard reference evaporation calculation for inland south eastern      !\n",
        "!   Australia\" By Wayne Meyer 1993                                           !\n",
        "!                                                                            !\n",
        "!  Written in Microsoft Fortran V5.1 by Bob White March 1994                 !\n",
        "!                                                                            !\n",
        "!  Long variable names (up to 31 characters) have been used. This may cause  !\n",
        "!  some problems if this routine is complied with early versions of fortran  !\n",
        "!                                                                            !\n",
        "!  Function returns calculated value for Potential ET (0.0 if error)         !\n",
        "!                                                                            !\n",
        "!  Modified to account for changing albedo from bare soil (salb) to crop     !\n",
        "!  (0.23) as canopy (LAI) increases. RJGW -> 05-04-95                        !\n",
        "!                                                                            !\n",
        "!  04/01/2004 CHP adapted for CSM\n",
        "!  07/24/2006 CHP Use MSALB instead of SALB (includes mulch and soil\n",
        "!                 water effects on albedo)\n",
        "C=============================================================================\n",
        "! VARIABLES INPUT TO ROUTINE\n",
        "C=============================================================================\n",
        "!! Name             !                                                        !\n",
        "C=============================================================================\n",
        "!! MeanTemp         ! Mean daily temperature in degres C                     !\n",
        "C=============================================================================\n",
        "!! Prev3dayMean     ! Mean of the previous 3 days mean temperature           !\n",
        "C=============================================================================\n",
        "!! DailyWindRun     ! Daily wind run in Km / day                             !\n",
        "C=============================================================================\n",
        "!! SolarIrradiance  ! Solar irradiance (MJ / m**2 / day)                     !\n",
        "C=============================================================================\n",
        "!! MeanDewPt        ! Mean daily dew point temperature (Deg C)               !\n",
        "C=============================================================================\n",
        "!! Jday             ! Julian day of the year                                 !\n",
        "C=============================================================================\n",
        "!!VARIABLES LOCAL TO THIS ROUTINE\n",
        "C=============================================================================\n",
        "!!                  ! Description                                            !\n",
        "C=============================================================================\n",
        "!! Albedo           !                                                        !\n",
        "C=============================================================================\n",
        "!! Coeff_A          ! Empirical coefficient used in Ro calculation           !\n",
        "C=============================================================================\n",
        "!! Coeff_B          !    \"          \"        \"    \"  \"      \"                !\n",
        "C=============================================================================\n",
        "!! Coeff_C          ! Empirical coefficient used in Net emissivity calc.     !\n",
        "C=============================================================================\n",
        "!! Coeff_D          !    \"           \"        \"   \"  \"       \"      \"        !\n",
        "C=============================================================================\n",
        "!! Coeff_WindA      ! Empirical coefficient used in wind function calc.      !\n",
        "C=============================================================================\n",
        "!! Coeff_WindB      !    \"           \"        \"   \"  \"       \"     \"         !\n",
        "C=============================================================================\n",
        "!! Delta            ! Used in proportioning term see equ (7)                 !\n",
        "C=============================================================================\n",
        "!! DODPG            ! Proportioning term                                     !\n",
        "C=============================================================================\n",
        "!! ETpot            ! Calculated potential evapotranspiration                !\n",
        "C=============================================================================\n",
        "!! Fac1             ! Intermediate term in long wave radiation calc.         !\n",
        "C=============================================================================\n",
        "!! Gflux            ! Ground heat flux                                       !\n",
        "C=============================================================================\n",
        "!! LatHeapVap       ! Latent heat of vaporisation                            !\n",
        "C=============================================================================\n",
        "!! MaxIrradiance    ! Max clear day irradiance                               !\n",
        "C=============================================================================\n",
        "!! NetEmissivity    ! Net emissivity                                         !\n",
        "C=============================================================================\n",
        "!! NetRad           ! Net radiation                                          !\n",
        "C=============================================================================\n",
        "!! PI               !                                                        !\n",
        "C=============================================================================\n",
        "!! Radj             ! Julian day of year converted to radians                !\n",
        "C=============================================================================\n",
        "!! RalLon           ! Long wave radiation                                    !\n",
        "C=============================================================================\n",
        "!! StefBoltz        ! Stefan-Boltzman constant                               !\n",
        "C=============================================================================\n",
        "!! VPdew            ! Actual daily vapour pressure                           !\n",
        "C=============================================================================\n",
        "!! VPD              ! Vapour pressure deficit                                !\n",
        "C=============================================================================\n",
        "!! VPsat            ! Saturation vapour pressure                             !\n",
        "C=============================================================================\n",
        "!! WindFunc         ! Wind function (see equ 24)                             !\n",
        "C=============================================================================\n",
        "C=============================================================================\n"
      ],
      "internal": {}
    },
    "PETPNO": {
      "head": [
        "!-----------------------------------------------------------------------\n",
        "!     PETPT VARIABLES:\n",
        "!-----------------------------------------------------------------------\n",
        "! ALBEDO  Reflectance of soil-crop surface (fraction)\n",
        "! EEQ     Equilibrium evaporation (mm/d)\n",
        "! EO      Potential evapotranspiration rate (mm/d)\n",
        "! MSALB   Soil albedo with mulch and soil water effects (fraction)\n",
        "! SLANG   Solar radiation\n",
        "! SRAD    Solar radiation (MJ/m2-d)\n",
        "! TD      Approximation of average daily temperature (\u00ef\u00bf\u00bdC)\n",
        "! TMAX    Maximum daily temperature (\u00ef\u00bf\u00bdC)\n",
        "! TMIN    Minimum daily temperature (\u00ef\u00bf\u00bdC)\n",
        "! XHLAI   Leaf area index (m2[leaf] / m2[ground])\n",
        "!-----------------------------------------------------------------------\n",
        "!     END SUBROUTINE PETPT\n",
        "C=======================================================================\n",
        "C=======================================================================\n",
        "C  PETPNO, Subroutine, N.B. Pickering\n",
        "C  Calculates FAO-24 Penman potential evapotranspiration (without\n",
        "C  correction)--grass reference.\n",
        "!-----------------------------------------------------------------------\n",
        "C  REVISION HISTORY\n",
        "C  02/19/1992 NBP Written\n",
        "C  11/04/1993 NBP Renamed routine PET to PETPEN.  Changed XLAI to XHLAI\n",
        "C               Added XHLAI .LE. 0.0 statement.\n",
        "C  05/13/1994 NBP Converted all vapor pressures to Pa.  Rearranged.\n",
        "C  09/16/1994 NBP Added limits to prevent EO and ES (PE) < 0.\n",
        "C  10/17/1997 CHP Updated for modular format.\n",
        "C  09/01/1999 GH  Incorporated into CROPGRO\n",
        "C  05/06/2002 WMB Fixed Stefan-Boltzmann constant\n",
        "!  07/24/2006 CHP Use MSALB instead of SALB (includes mulch and soil\n",
        "!                 water effects on albedo)\n",
        "!-----------------------------------------------------------------------\n",
        "!  Called from:   PET\n",
        "!  Calls:         None\n",
        "C=======================================================================\n"
      ],
      "neck": [
        "!-----------------------------------------------------------------------\n"
      ],
      "foot": [
        "!=======================================================================\n",
        "!=======================================================================\n",
        "!  PSE, Subroutine, J.T. Ritchie\n",
        "!  Calculates soil potential evaporation from total PET and LAI.\n",
        "!-----------------------------------------------------------------------\n",
        "!  REVISION HISTORY\n",
        "!  ??/??/19?? JR  Written\n",
        "!  11/04/1993 NBP Modified\n",
        "!  07/21/1998 CHP changed PE Function to PSE Subroutine\n",
        "!  01/15/2003 KJB CHANGED TO USE SAME K EXTINCTION AS USED FOR TRANSP\n",
        "!    VILLALOBOS MEASURED K=0.52 FOR BOTH SOIL EVAPORATION AND TRANSP\n",
        "!    THEORY OF GOUDRIAAN INDICATES A VALUE NEAR 0.5 BECAUSE OF BOTH\n",
        "!    NEAR-INFARED PLUS VISIBLE COMBINE TO GIVE YOU THIS COMBINATION K\n",
        "!  07/08/2003 CHP/LAH added use of KSEVAP which comes from crop routines\n",
        "!  03/10/2006 CHP Reduce potential soil evaporation if mulch cover.\n",
        "!                 From A. Andeles tillage routine.\n",
        "!  05/26/2007 CHP/MJ Use XLAI instead of XHLAI\n",
        "!                 This was important for Canegro and affects CROPGRO crops\n",
        "!                 only very slightly (max 0.5% yield diff for one peanut\n",
        "!                 experiment).  No difference to other crop models.\n",
        "!  06/25/2008 CHP Move mulch evaporationto MULCHEVAP subroutine\n",
        "!-----------------------------------------------------------------------\n",
        "!  Input : EO,XLAI\n",
        "!  Output: PE\n",
        "!=======================================================================\n"
      ],
      "internal": {}
    },
    "Petmey": {
      "head": [
        "!-----------------------------------------------------------------------\n",
        "!     PETPEN VARIABLES:\n",
        "!-----------------------------------------------------------------------\n",
        "! ALBEDO  Reflectance of soil-crop surface (fraction)\n",
        "! CLOUDS  Relative cloudiness factor (0-1)\n",
        "! DAIR\n",
        "! EAIR    Vapor pressure at dewpoint (Pa)\n",
        "! EO      Potential evapotranspiration rate (mm/d)\n",
        "! ESAT    Vapor pressure of air (Pa)\n",
        "! G       Soil heat flux density term (MJ/m2/d)\n",
        "! LHVAP   Latent head of water vaporization (J/kg)\n",
        "! PATM     = 101300.0\n",
        "! PSYCON  Psychrometric constant (Pa/K)\n",
        "! RADB    Net outgoing thermal radiation (MJ/m2/d)\n",
        "! RNET    Net radiation (MJ/m2/d)\n",
        "! RNETMG  Radiant energy portion of Penman equation (mm/d)\n",
        "! RT\n",
        "! S       Rate of change of saturated vapor pressure of air with\n",
        "!           temperature (Pa/K)\n",
        "! MSALB   Soil albedo with mulch and soil water effects (fraction)\n",
        "! SBZCON   Stefan Boltzmann constant = 4.093E-9 (MJ/m2/d)\n",
        "! SHAIR    = 1005.0\n",
        "! SRAD    Solar radiation (MJ/m2-d)\n",
        "! TAVG    Average daily temperature (\u00ef\u00bf\u00bdC)\n",
        "! TDEW    Dewpoint temperature (\u00ef\u00bf\u00bdC)\n",
        "! TK4     Temperature to 4th power ((oK)**4)\n",
        "! TMAX    Maximum daily temperature (\u00ef\u00bf\u00bdC)\n",
        "! TMIN    Minimum daily temperature (\u00ef\u00bf\u00bdC)\n",
        "! VHCAIR\n",
        "! VPD     Vapor pressure deficit (Pa)\n",
        "! VPSAT   Saturated vapor pressure of air (Pa)\n",
        "! VPSLOP  Calculates slope of saturated vapor pressure versus\n",
        "!           temperature curve (Pa/K)\n",
        "! WFNFAO  FAO 24 hour wind function\n",
        "! WIND2   Windspeed at 2m reference height. (km/d)\n",
        "! WINDSP  Wind speed at 2m (km/d)\n",
        "! XHLAI   Leaf area index (m2[leaf] / m2[ground])\n",
        "!-----------------------------------------------------------------------\n",
        "!     END SUBROUTINE PETPNO\n",
        "!-----------------------------------------------------------------------\n",
        "C=======================================================================\n",
        "C=======================================================================\n",
        "C  PETMEY, Subroutine\n",
        "!  Copyright(c) CSIRO 2000C  Calculates soil-plant-atmosphere interface\n",
        "!  energy balance components.\n",
        "C-----------------------------------------------------------------------\n",
        "C  REVISION       HISTORY\n",
        "C-----------------------------------------------------------------------\n",
        "C  Called by: Main\n",
        "C=============================================================================\n",
        "!  Routine to calculate Potential Evapotranspiration (ET) from daily         !\n",
        "!  weather data.                                                             !\n",
        "!                                                                            !\n",
        "!  Uses coefficients and methods as per                                      !\n",
        "!  \"Standard reference evaporation calculation for inland south eastern      !\n",
        "!   Australia\" By Wayne Meyer 1993                                           !\n",
        "!                                                                            !\n",
        "!  Written in Microsoft Fortran V5.1 by Bob White March 1994                 !\n",
        "!                                                                            !\n",
        "!  Long variable names (up to 31 characters) have been used. This may cause  !\n",
        "!  some problems if this routine is complied with early versions of fortran  !\n",
        "!                                                                            !\n",
        "!  Function returns calculated value for Potential ET (0.0 if error)         !\n",
        "!                                                                            !\n",
        "!  Modified to account for changing albedo from bare soil (salb) to crop     !\n",
        "!  (0.23) as canopy (LAI) increases. RJGW -> 05-04-95                        !\n",
        "!                                                                            !\n",
        "!  04/01/2004 CHP adapted for CSM\n",
        "!  07/24/2006 CHP Use MSALB instead of SALB (includes mulch and soil\n",
        "!                 water effects on albedo)\n",
        "C=============================================================================\n",
        "! VARIABLES INPUT TO ROUTINE\n",
        "C=============================================================================\n",
        "!! Name             !                                                        !\n",
        "C=============================================================================\n",
        "!! MeanTemp         ! Mean daily temperature in degres C                     !\n",
        "C=============================================================================\n",
        "!! Prev3dayMean     ! Mean of the previous 3 days mean temperature           !\n",
        "C=============================================================================\n",
        "!! DailyWindRun     ! Daily wind run in Km / day                             !\n",
        "C=============================================================================\n",
        "!! SolarIrradiance  ! Solar irradiance (MJ / m**2 / day)                     !\n",
        "C=============================================================================\n",
        "!! MeanDewPt        ! Mean daily dew point temperature (Deg C)               !\n",
        "C=============================================================================\n",
        "!! Jday             ! Julian day of the year                                 !\n",
        "C=============================================================================\n",
        "!!VARIABLES LOCAL TO THIS ROUTINE\n",
        "C=============================================================================\n",
        "!!                  ! Description                                            !\n",
        "C=============================================================================\n",
        "!! Albedo           !                                                        !\n",
        "C=============================================================================\n",
        "!! Coeff_A          ! Empirical coefficient used in Ro calculation           !\n",
        "C=============================================================================\n",
        "!! Coeff_B          !    \"          \"        \"    \"  \"      \"                !\n",
        "C=============================================================================\n",
        "!! Coeff_C          ! Empirical coefficient used in Net emissivity calc.     !\n",
        "C=============================================================================\n",
        "!! Coeff_D          !    \"           \"        \"   \"  \"       \"      \"        !\n",
        "C=============================================================================\n",
        "!! Coeff_WindA      ! Empirical coefficient used in wind function calc.      !\n",
        "C=============================================================================\n",
        "!! Coeff_WindB      !    \"           \"        \"   \"  \"       \"     \"         !\n",
        "C=============================================================================\n",
        "!! Delta            ! Used in proportioning term see equ (7)                 !\n",
        "C=============================================================================\n",
        "!! DODPG            ! Proportioning term                                     !\n",
        "C=============================================================================\n",
        "!! ETpot            ! Calculated potential evapotranspiration                !\n",
        "C=============================================================================\n",
        "!! Fac1             ! Intermediate term in long wave radiation calc.         !\n",
        "C=============================================================================\n",
        "!! Gflux            ! Ground heat flux                                       !\n",
        "C=============================================================================\n",
        "!! LatHeapVap       ! Latent heat of vaporisation                            !\n",
        "C=============================================================================\n",
        "!! MaxIrradiance    ! Max clear day irradiance                               !\n",
        "C=============================================================================\n",
        "!! NetEmissivity    ! Net emissivity                                         !\n",
        "C=============================================================================\n",
        "!! NetRad           ! Net radiation                                          !\n",
        "C=============================================================================\n",
        "!! PI               !                                                        !\n",
        "C=============================================================================\n",
        "!! Radj             ! Julian day of year converted to radians                !\n",
        "C=============================================================================\n",
        "!! RalLon           ! Long wave radiation                                    !\n",
        "C=============================================================================\n",
        "!! StefBoltz        ! Stefan-Boltzman constant                               !\n",
        "C=============================================================================\n",
        "!! VPdew            ! Actual daily vapour pressure                           !\n",
        "C=============================================================================\n",
        "!! VPD              ! Vapour pressure deficit                                !\n",
        "C=============================================================================\n",
        "!! VPsat            ! Saturation vapour pressure                             !\n",
        "C=============================================================================\n",
        "!! WindFunc         ! Wind function (see equ 24)                             !\n",
        "C=============================================================================\n",
        "C=============================================================================\n"
      ],
      "neck": [],
      "foot": [
        "!-----------------------------------------------------------------------\n",
        "!     PSE VARIABLES:\n",
        "!-----------------------------------------------------------------------\n",
        "! EO     Potential evapotranspiration rate (mm/d)\n",
        "! EOS    Potential rate of soil evaporation (mm/d)\n",
        "! KE     Evaporation coefficient for ASCE dual Kc ET method\n",
        "! REFET  ASCE Standardized Reference Evapotranspiration (alfalfa or grass)\n",
        "! XLAI   Leaf area index (m2[leaf] / m2[ground])\n",
        "!-----------------------------------------------------------------------\n",
        "!     END SUBROUTINE PSE\n",
        "C=======================================================================\n",
        "C=======================================================================\n",
        "C  FLOOD_EVAP, Subroutine, U. Singh\n",
        "C  Determines floodwater evaporation\n",
        "C-----------------------------------------------------------------------\n",
        "C  REVISION HISTORY\n",
        "C  ??/??/??   US  Written.\n",
        "C  02/27/2002 CHP modified for modular format.\n",
        "!  12/07/2005 CHP added discontinuity prevention\n",
        "!-----------------------------------------------------------------------\n",
        "!  Called by:   SPAM\n",
        "!  Calls:       None\n",
        "C=======================================================================\n"
      ],
      "internal": {}
    },
    "PSE": {
      "head": [
        "!=======================================================================\n",
        "!=======================================================================\n",
        "!  PSE, Subroutine, J.T. Ritchie\n",
        "!  Calculates soil potential evaporation from total PET and LAI.\n",
        "!-----------------------------------------------------------------------\n",
        "!  REVISION HISTORY\n",
        "!  ??/??/19?? JR  Written\n",
        "!  11/04/1993 NBP Modified\n",
        "!  07/21/1998 CHP changed PE Function to PSE Subroutine\n",
        "!  01/15/2003 KJB CHANGED TO USE SAME K EXTINCTION AS USED FOR TRANSP\n",
        "!    VILLALOBOS MEASURED K=0.52 FOR BOTH SOIL EVAPORATION AND TRANSP\n",
        "!    THEORY OF GOUDRIAAN INDICATES A VALUE NEAR 0.5 BECAUSE OF BOTH\n",
        "!    NEAR-INFARED PLUS VISIBLE COMBINE TO GIVE YOU THIS COMBINATION K\n",
        "!  07/08/2003 CHP/LAH added use of KSEVAP which comes from crop routines\n",
        "!  03/10/2006 CHP Reduce potential soil evaporation if mulch cover.\n",
        "!                 From A. Andeles tillage routine.\n",
        "!  05/26/2007 CHP/MJ Use XLAI instead of XHLAI\n",
        "!                 This was important for Canegro and affects CROPGRO crops\n",
        "!                 only very slightly (max 0.5% yield diff for one peanut\n",
        "!                 experiment).  No difference to other crop models.\n",
        "!  06/25/2008 CHP Move mulch evaporationto MULCHEVAP subroutine\n",
        "!-----------------------------------------------------------------------\n",
        "!  Input : EO,XLAI\n",
        "!  Output: PE\n",
        "!=======================================================================\n"
      ],
      "neck": [],
      "foot": [],
      "internal": {}
    },
    "FLOOD_EVAP": {
      "head": [
        "!-----------------------------------------------------------------------\n",
        "!     PSE VARIABLES:\n",
        "!-----------------------------------------------------------------------\n",
        "! EO     Potential evapotranspiration rate (mm/d)\n",
        "! EOS    Potential rate of soil evaporation (mm/d)\n",
        "! KE     Evaporation coefficient for ASCE dual Kc ET method\n",
        "! REFET  ASCE Standardized Reference Evapotranspiration (alfalfa or grass)\n",
        "! XLAI   Leaf area index (m2[leaf] / m2[ground])\n",
        "!-----------------------------------------------------------------------\n",
        "!     END SUBROUTINE PSE\n",
        "C=======================================================================\n",
        "C=======================================================================\n",
        "C  FLOOD_EVAP, Subroutine, U. Singh\n",
        "C  Determines floodwater evaporation\n",
        "C-----------------------------------------------------------------------\n",
        "C  REVISION HISTORY\n",
        "C  ??/??/??   US  Written.\n",
        "C  02/27/2002 CHP modified for modular format.\n",
        "!  12/07/2005 CHP added discontinuity prevention\n",
        "!-----------------------------------------------------------------------\n",
        "!  Called by:   SPAM\n",
        "!  Calls:       None\n",
        "C=======================================================================\n"
      ],
      "neck": [],
      "foot": [
        "C=======================================================================\n"
      ],
      "internal": {}
    }
  },
  "system": {
    "name": "mini_PET",
    "components": [
      {
        "grfn_source": "scripts/tmp/mini_PET_GrFN.json",
        "code_source": [
          "tests/data/program_analysis/multifile_multimod/dssat-PET/mini_PET.for"
        ],
        "imports": [
          "scripts/tmp/m_mini_moduledefs_GrFN.json",
          "scripts/tmp/m_mini_moduledefs_GrFN.json",
          "scripts/tmp/m_moduledata_GrFN.json",
          "scripts/tmp/m_mini_moduledefs_GrFN.json",
          "scripts/tmp/m_mini_moduledefs_GrFN.json",
          "scripts/tmp/m_moduledata_GrFN.json"
        ]
      }
    ]
  }
}