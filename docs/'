import numpy as np
from matplotlib import pyplot as plt
from indra.sources import eidos
from indra.statements import Influence, Agent
import itertools
from itertools import islice, permutations, accumulate, cycle, repeat
from functools import reduce
import scipy
from scipy import stats
import pandas as pd
from tqdm import tqdm, trange
from typing import Optional, List, TypeVar, Dict, Iterable, Iterator
from helpers import *
import matplotlib as mpl
import networkx as nx

""" 
Consider the following passage:

The government promotes improved cultivar to boost agricultural production
for ensuring food security. However, the policy to seriously cut down the use
of inorganic fertilizer and phase out the fertilizer subsidy results in
deteriorating biophysical conditions, low use of inorganic fertilizer, less
water, significantly reduced farm sizes which lead to low benefit from the
improved cultivar.  

Below is a collection of manually constructed Influence Statements to represent
the above passage.
"""

params = {
    "font.family": "serif", # use serif/main font for text elements
    "text.usetex": True,    # use inline math for ticks
    "font.serif": 'Palatino',
    "figure.figsize": [4,3],
}

mpl.rcParams.update(params)

from matplotlib import pyplot as plt
import seaborn as sns
plt.style.use('ggplot')

def example_statements() -> List[Influence]:
    return [
        Influence(
            Agent("cultivar"),
            Agent("agricultural production"),
            {'adjective': None, 'polarity': 1},
            {'adjective': None, 'polarity': 1}
        ),

        Influence(
            Agent("agricultural production"),
            Agent("food security"),
            {'adjective': None, 'polarity': 1},
            {'adjective': None, 'polarity': 1}
        ),

        Influence(
            Agent("inorganic fertilizer"),
            Agent("biophysical conditions"),
            {'adjective': 'serious', 'polarity': -1},
            {'adjective': None, 'polarity': -1}
        ),

        Influence(
            Agent("inorganic fertilizer"),
            Agent("water"),
            {'adjective': None, 'polarity': -1},
            {'adjective': None, 'polarity': -1}
        ),

        Influence(
            Agent("inorganic fertilizer"),
            Agent("farm sizes"),
            {'adjective': None, 'polarity': -1},
            {'adjective': 'significant', 'polarity': -1}
        ),

        Influence(
            Agent("fertilizer subsidy"),
            Agent("biophysical conditions"),
            {'adjective': None, 'polarity': -1},
            {'adjective': None, 'polarity': -1}
        ),

        Influence(
            Agent("fertilizer subsidy"),
            Agent("water"),
            {'adjective': None, 'polarity': -1},
            {'adjective': None, 'polarity': -1}
        ),

        Influence(
            Agent("fertilizer subsidy"),
            Agent("farm sizes"),
            {'adjective': None, 'polarity': -1},
            {'adjective': 'significant', 'polarity': -1}
        ),

        Influence(
            Agent("biophysical conditions"),
            Agent("agricultural production"),
            {'adjective': None, 'polarity': -1},
            {'adjective': None, 'polarity': -1}
        ),

        Influence(
            Agent("water"),
            Agent("agricultural production"),
            {'adjective': None, 'polarity': -1},
            {'adjective': None, 'polarity': -1}
        ),

        Influence(
            Agent("farm sizes"),
            Agent("agricultural production"),
            {'adjective': 'significant', 'polarity': -1},
            {'adjective': None, 'polarity': -1}
        )
    ]

def get_groupby_object(filename: str)->groupby:
    """ This function takes the data from  :cite:`Sharp:2017`, grouped by
    gradable adjective.

    Args:
        filename: The name of the file that contains the adjective data.
    Returns:
        A pandas groupby object.

    .. bibliography:: bibliography.bib

    """
    return pd.read_csv(filename,delim_whitespace=True).groupby('adjective')

def get_array_of_responses(gb: groupby) -> np.ndarray:
    """
    Args:
        gb: A GroupBy object
    """
     
    return np.array([stats.gaussian_kde(group['respdev'].tolist()).resample(80)
                   for _, group in gb]).flatten()

def get_responses(x_delta: Dict, gb:groupby, rs:np.ndarray) -> np.ndarray:
    if x_delta['adjective'] != None:
        return np.array(gb.get_group(x_delta['adjective'])['respdev'].tolist())
    else:
        return rs

def θ_distribution(subj: Agent, obj: Agent, 
        relevant_statements: List[Influence], gb:groupby,
        rs:np.ndarray) -> stats.gaussian_kde:
    rs_subj, rs_obj=list(*zip([[x['polarity']*get_responses(x, gb, rs) for x in
            (s.subj_delta, s.obj_delta)] for s in relevant_statements]))[0]

    xs1, ys1 = np.meshgrid(rs_subj, rs_obj, indexing='xy')

    if len({s.subj_delta['polarity']==s.obj_delta['polarity'] 
            for s in relevant_statements})==1:
        xs2, ys2 = -xs1, -ys1
        thetas=np.append(
            np.arctan2(ys1.flatten(), xs1.flatten()),
            np.arctan2(ys2.flatten(), xs2.flatten())
        )
    else:
        thetas=np.arctan2(ys1.flatten(), xs1.flatten())

    return stats.gaussian_kde(thetas)

np.set_printoptions(precision=1, linewidth=1000)
pd.set_option('display.max_columns',100)
pd.set_option('display.width',1000)
# pd.set_option('precision',2)

def get_agents(statements: List[Influence]) -> List[str]:
    return list(flatten([(a, f'∂({a})/∂t') 
        for a in sorted(set(flatten([(x.subj.name, x.obj.name) 
            for x in statements])))]))

def sample_transition_matrix(agents: List[Agent],
                             statements: List[Influence],
                             gb: groupby, 
                             rs: np.ndarray
                             ) -> np.ndarray:

    A=pd.DataFrame(np.identity(len(agents)),index=agents, columns=agents)
    for a in agents[::2]:
        A[f'∂({a})/∂t'][f'{a}']=1

    for ac in permutations(agents,2):
        relevant_statements=[s for s in statements 
                            if s.subj.name==ac[0] and s.obj.name==ac[1]]

        if len(relevant_statements)!=0:
            sampled_slope=np.tan(θ_distribution(*ac, relevant_statements, gb, rs).resample(1)[0][0])
            A[f'∂({ac[0]})/∂t'][f'∂({ac[1]})/∂t']=sampled_slope

    return A.as_matrix()

def sample_sequence(s0: pd.Series,
                    gb: groupby,
                    rs: np.ndarray,
                    statements,
                    timesteps: int=10,
                    ) -> Iterator[np.ndarray]:

    agents = get_agents(statements)
    A=sample_transition_matrix(agents, statements, gb, rs)
    return take(timesteps, accumulate(repeat(s0.values), lambda x, _: A @ x))

def sample_sequences(statements: List[Influence],
        timesteps=10, n_samples: int=10) -> List[np.ndarray]:
    filename=\
    '~/Research/WorldModelers/doc/conditional_probabilities/data/adjectiveData.tsv' 
    agents = get_agents(statements)
    gb = get_groupby_object(filename)
    rs=get_array_of_responses(gb)
    print('constructed array of responses')
    s0=pd.Series(take(len(agents), cycle([100,0])), index=agents)
    s0['∂(fertilizer subsidy)/∂t']=1
    return [sample_sequence(s0, gb, rs, statements, timesteps) for x in trange(n_samples)]

def causal_influence_graph(statements):
    G = nx.DiGraph()
    for s in statements:
        if s.subj_delta['polarity']==s.obj_delta['polarity']:
            correlation='positive'
        else:
            correlation='negative'
        G.add_edge(s.subj.name.capitalize(), s.obj.name.capitalize(), correlation=correlation)
    nx.write_gml(G, "causal_graph.gml")

def create_example_plot():
    statements = example_statements()
    sampled_sequences = sample_sequences(statements, timesteps=10,
            n_samples=100)
    fig, axes = plt.subplots(4,2, figsize=(4,6))
    agents = get_agents(statements)
    for index, x in np.ndenumerate(np.arange(len(agents)/2).reshape(4,2)):
        values = [v for v in [sequence[-1][::2][int(x)] for sequence in
            sampled_sequences] if abs(v) < 200]
        sns.distplot(values, ax=axes[index[0], index[1]])
        axes[index[0], index[1]].set_xlabel(agents[::2][int(x)].capitalize(),
                fontsize=8)
        axes[index[0], index[1]].tick_params('both', labelsize=8)
    plt.tight_layout()
    plt.savefig('example_wm_plots.pdf')

if __name__=='__main__':
    create_example_plot()
    
